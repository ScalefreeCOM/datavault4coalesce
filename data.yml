defaultStorageMapping: CORE
jobs:
  Job-1:
    id: 1
    name: New Job
    steps: []
    subgraphs: []
locations:
  CORE:
    mappingDefinitions:
      "3":
        database: COALESCE_WORKSHOP
        schema: CORE
  EXTERNAL_TABLES:
    mappingDefinitions:
      "3":
        database: COALESCE_WORKSHOP
        schema: EXTERNAL_TABLES
  RAW_STAGE:
    mappingDefinitions:
      "3":
        database: COALESCE_WORKSHOP
        schema: RAW_STAGE
  TPCH_SF1:
    mappingDefinitions:
      "3":
        database: SNOWFLAKE_SAMPLE_DATA
        schema: TPCH_SF1
macros:
  Macro-1:
    id: "1"
    macroString: |-
      {%- macro datavault4coalesce__is_list(obj, empty_is_false=false) -%}
      
          {%- if obj is iterable and obj is not string and obj is not mapping -%}
              {%- if obj is none and obj is undefined and not obj and empty_is_false -%}
                  {%- do return(false) -%}
              {%- endif -%}
      
              {%- do return(true) -%}
          {%- else -%}
              {%- do return(false) -%}
          {%- endif -%}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__is_nothing(obj) -%}
      
          {%- if obj is none or obj is undefined or not obj -%}
              {%- do return(true) -%}
          {%- else -%}
              {%- do return(false) -%}
          {%- endif -%}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__is_something(obj) -%}
      
          {%- if obj is not none and obj is defined and obj -%}
              {%- do return(true) -%}
          {%- else -%}
              {%- do return(false) -%}
          {%- endif -%}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__is_expression(obj) -%}
      
          {%- if obj is string -%}
              {%- if (obj | first == "'" and obj | last == "'") or ("(" in obj and ")" in obj) or "::" in obj -%}
                  {%- do return(true) -%}
              {%- else -%}
                  {%- do return(false) -%}
              {%- endif -%}
          {%- else -%}
              {%- do return(false) -%}
          {%- endif -%}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__is_attribute(obj) -%}
      
      {%- if obj is not none and obj is string and obj -%}
      
              {%- if obj | first == "!" -%}
              
                  {{- return(false) -}}
              
              {%- else -%}
              
                  {%- if datavault4coalesce__is_expression(obj) -%}
                  
                      {{- return(false) -}}
      
                  {%- else -%}
      
                      {{- return(true) -}}
      
                  {%- endif -%}
      
              {%- endif -%}
          {%- else -%}
              {%- if execute -%}
                  {{ exceptions.raise_compiler_error("Invalid 'obj' object provided to 'is_attribute' check. Must be a string and not null.") }}
              {%- endif %}
          {%- endif -%}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__process_columns_to_select(columns_list=none, exclude_columns_list=none) -%}
          {% set exclude_columns_list = exclude_columns_list | map('upper') | list %}
          {% set columns_to_select = [] %}
      
          {% if not datavault4coalesce__is_list(columns_list) or not datavault4coalesce__is_list(exclude_columns_list)  %}
      
              {{- exceptions.raise_compiler_error("One or both arguments are not of list type.") -}}
      
          {%- endif -%}
      
          {%- if datavault4coalesce__is_something(columns_list) and datavault4coalesce__is_something(exclude_columns_list) -%}
              {%- for col in columns_list -%}
      
                  {%- if col|lower not in exclude_columns_list | map('lower') -%}
                      {%- do columns_to_select.append(col) -%}
                  {%- endif -%}
      
              {%- endfor -%}
          {%- elif datavault4coalesce__is_something(columns_list) and not datavault4coalesce__is_something(exclude_columns_list) %}
              {% set columns_to_select = columns_list %}
          {%- endif -%}
      
          {%- do return(columns_to_select) -%}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__extract_column_names(columns_dict=none) -%}
      
          {%- set extracted_column_names = [] -%}
      
          {%- if columns_dict is mapping -%}
              {%- for key, value in columns_dict.items() -%}
                  {%- do extracted_column_names.append(key) -%}
              {%- endfor -%}
      
              {%- do return(extracted_column_names) -%}
          {%- else -%}
              {%- do return([]) -%}
          {%- endif -%}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__extract_input_columns(columns_dict=none) -%}
      
          {%- set extracted_input_columns = [] -%}
      
          {%- if columns_dict is mapping -%}
              {%- for key, value in columns_dict.items() -%}
                  {%- if value is mapping and 'src_cols_required' in value.keys() -%}
                      {%- do extracted_input_columns.append(value['src_cols_required']) -%}
                  {%- elif value is mapping and 'value' in value.keys() and 'src_cols_required' not in value.keys() -%}
                      {# Do nothing. No source column required. #}    
                  {%- elif value is mapping and value.is_hashdiff -%}
                      {%- do extracted_input_columns.append(value['columns']) -%}
                  {%- elif value is mapping and 'this_column_name' in value.keys() -%}
                      {%- do extracted_input_columns.append(value['this_column_name']) -%}
                  {%- else -%}
                      {%- do extracted_input_columns.append(value) -%}
                  {%- endif -%}
              {%- endfor -%}
      
              {%- do return(extracted_input_columns) -%}
          {%- else -%}
              {%- do return([]) -%}
          {%- endif -%}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__process_hash_column_excludes(hash_columns=none, source_columns=none) -%}
      
          {%- set processed_hash_columns = {} -%}
      
          {%- for col, col_mapping in hash_columns.items() -%}
              
              {%- if col_mapping is mapping -%}
                  {%- if col_mapping.exclude_columns -%}
      
                      {%- if col_mapping.columns -%}
      
                          {%- set columns_to_hash = datavault4coalesce__process_columns_to_select(source_columns, col_mapping.columns) -%}
      
                          {%- do hash_columns[col].pop('exclude_columns') -%}
                          {%- do hash_columns[col].update({'columns': columns_to_hash}) -%}
      
                          {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}
                      {%- else -%}
      
                          {%- do hash_columns[col].pop('exclude_columns') -%}
                          {%- do hash_columns[col].update({'columns': source_columns}) -%}
      
                          {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}
                      {%- endif -%}
                  {%- else -%}
                      {%- do processed_hash_columns.update({col: col_mapping}) -%}
                  {%- endif -%}
              {%- else -%}
                  {%- do processed_hash_columns.update({col: col_mapping}) -%}
              {%- endif -%}
      
          {%- endfor -%}
      
          {%- do return(processed_hash_columns) -%}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__print_list(list_to_print=none, indent=4, src_alias=none) -%}
      
          {%- for col_name in list_to_print -%}
              {%- if src_alias %}
              {{ (src_alias ~ '.' ~ col_name) | indent(indent) }}{{ "," if not loop.last }}
              {%- else %}
              {{ col_name | indent(indent) }}{{ "," if not loop.last }}
              {%- endif %}
          {%- endfor -%}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__as_constant(column_str) -%}
      
          {%- if column_str is not none and column_str is string and column_str -%}
      
              {%- if column_str | first == "!" -%}
              
                  {{- return("'" ~ column_str[1:] ~ "'") -}}
              
              {%- else -%}
              
                  {{- return(column_str) -}}
      
              {%- endif -%}
          {%- else -%}
              {%- if execute -%}
                  {{ exceptions.raise_compiler_error("Invalid columns_str object provided. Must be a string and not null.") }}
              {%- endif %}
          {%- endif -%}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__escape_column_names(columns=none) -%}
      
      {# Different platforms use different escape characters, the default below is for Snowflake which uses double quotes #}
      
          {%- if datavault4coalesce__is_something(columns) -%}
      
              {%- set col_string = '' -%}
              {%- set col_list = [] -%}
              {%- set col_mapping = {} -%}
      
              {%- if columns is string -%}
      
                  {%- set col_string = datavault4coalesce__escape_column_name(columns) -%}
      
              {%- elif datavault4coalesce__is_list(columns) -%}
      
                  {%- for col in columns -%}
      
                      {%- if col is string -%}
      
                          {%- set escaped_col = datavault4coalesce__escape_column_name(col) -%}
      
                          {%- do col_list.append(escaped_col) -%}
      
                      {%- else -%}
      
                          {%- if execute -%}
                              {{- exceptions.raise_compiler_error("Invalid column name(s) provided. Must be a string.") -}}
                          {%- endif -%}
      
                      {%- endif -%}
      
                  {%- endfor -%}
      
              {%- elif columns is mapping -%}
      
                  {%- if columns['source_column'] and columns['alias'] -%}
      
                      {%- set escaped_source_col = datavault4coalesce__escape_column_name(columns['source_column']) -%}
                      {%- set escaped_alias_col = datavault4coalesce__escape_column_name(columns['alias']) -%}
                      {%- set col_mapping = {"source_column": escaped_source_col, "alias": escaped_alias_col} -%}
      
                  {%- else -%}
      
                      {%- if execute -%}
                          {{- exceptions.raise_compiler_error("Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.") -}}
                      {%- endif %}
      
                  {%- endif -%}
      
              {%- else -%}
      
                  {%- if execute -%}
                      {{- exceptions.raise_compiler_error("Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.") -}}
                  {%- endif %}
      
              {%- endif -%}
      
          {%- elif columns == '' -%}
      
              {%- if execute -%}
                  {{- exceptions.raise_compiler_error("Expected a column name or a list of column names, got an empty string") -}}
              {%- endif -%}
      
          {%- endif -%}
      
      {%- if columns is none -%}
      
          {%- do return(none) -%}
      
      {%- elif columns == [] -%}
      
          {%- do return([]) -%}
      
      {%- elif columns == {} -%}
      
          {%- do return({}) -%}
      
      {%- elif columns is string -%}
      
          {%- do return(col_string) -%}
      
      {%- elif datavault4coalesce__is_list(columns) -%}
      
          {%- do return(col_list) -%}
      
      {%- elif columns is mapping -%}
      
          {%- do return(col_mapping) -%}
      
      {%- endif -%}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__expand_column_list(columns=none) -%}
      
      {%- if not columns -%}
          {%- if execute -%}
               {{- exceptions.raise_compiler_error("Expected a list of columns, got: " ~ columns) -}}
          {%- endif -%}
      {%- endif -%}
      
      {%- set col_list = [] -%}
      
      {%- if datavault4coalesce__is_list(columns) -%}
      
          {%- set columns = columns | reject("none") %}
      
          {%- for col in columns -%}
      
              {%- if col is string -%}
      
                  {%- do col_list.append(col) -%}
      
              {#- If list of lists -#}
              {%- elif datavault4coalesce__is_list(col) -%}
      
                  {%- for cols in col -%}
      
                      {%- do col_list.append(cols) -%}
      
                  {%- endfor -%}
              {%- elif col is mapping -%}
      
                  {%- do col_list.append(col) -%}
      
              {%- else -%}
      
                  {%- if execute -%}
                      {{- exceptions.raise_compiler_error("Invalid columns object provided. Must be a list of lists, dictionaries or strings.") -}}
                  {%- endif %}
      
              {%- endif -%}
      
          {%- endfor -%}
      {%- else -%}
      
          {%- if execute -%}
              {{- exceptions.raise_compiler_error("Invalid columns object provided. Must be a list.") -}}
          {%- endif %}
      
      {%- endif -%}
      
      {%- do return(col_list) -%}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__beginning_of_all_times() %}
      
      {%- set global_var = var('datavault4coalesce__beginning_of_all_times', none) -%}
      {%- set beginning_of_all_times = '' -%}
      
      {%- if global_var is mapping -%}
          {%- if 'snowflake' in global_var.keys()|map('lower') -%}
              {% set beginning_of_all_times = global_var['snowflake'] %}
          {%- else -%}
              {%- if execute -%}
                  {%- do exceptions.warn("Warning: You have set the global variable 'datavault4coalesce__beginning_of_all_times' to a dictionary, but have not included the adapter you use (snowflake) as a key. Applying the default value.") -%}
              {% endif %}
              {%- set beginning_of_all_times = "0001-01-01T00:00:01" -%}
          {% endif %}
      {%- elif global_var is not mapping and datavault4coalesce__is_something(global_var) -%}
          {%- set beginning_of_all_times = global_var -%}
      {%- else -%}
          {%- set beginning_of_all_times = "0001-01-01T00:00:01" -%}
      {%- endif -%}
      
      {{ return(beginning_of_all_times) }}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__end_of_all_times() %}
      
      {%- set global_var = var('datavault4coalesce__end_of_all_times', none) -%}
      {%- set end_of_all_times = '' -%}
      
      {%- if global_var is mapping -%}
          {%- if 'snowflake' in global_var.keys()|map('lower') -%}
              {% set end_of_all_times = global_var['snowflake'] %}
          {%- else -%}
              {%- if execute -%}
                  {%- do exceptions.warn("Warning: You have set the global variable 'datavault4coalesce__end_of_all_times' to a dictionary, but have not included the adapter you use (snowflake) as a key. Applying the default value.") -%}
              {% endif %}
              {%- set end_of_all_times = "8888-12-31T23:59:59" -%}
          {% endif %}
      {%- elif global_var is not mapping and datavault4coalesce__is_something(global_var) -%}
          {%- set end_of_all_times = global_var -%}
      {%- else -%}
          {%- set end_of_all_times = "8888-12-31T23:59:59" -%}
      {%- endif -%}
      
      {{ return(end_of_all_times) }}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__string_to_timestamp(format, timestamp) -%}
          TO_TIMESTAMP('{{ timestamp }}', '{{ format }}')
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__timestamp_format() %}
      
      {%- set global_var = var('datavault4coalesce__timestamp_format', none) -%}
      {%- set timestamp_format = '' -%}
      
      {%- if global_var is mapping -%}
          {%- if 'snowflake' in global_var.keys()|map('lower') -%}
              {% set timestamp_format = global_var['snowflake'] %}
          {%- else -%}
              {%- if execute -%}
                  {%- do exceptions.warn("Warning: You have set the global variable 'datavault4coalesce__timestamp_format' to a dictionary, but have not included the adapter you use (snowflake) as a key. Applying the default value.") -%}
              {% endif %}
              {%- set timestamp_format = "YYYY-MM-DDTHH24:MI:SS" -%}
          {% endif %}
      {%- elif global_var is not mapping and datavault4coalesce__is_something(global_var) -%}
          {%- set timestamp_format = global_var -%}
      {%- else -%}
          {%- set timestamp_format = "YYYY-MM-DDTHH24:MI:SS" -%}
      {%- endif -%}
      
      {{ return(timestamp_format) }}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__ghost_record_per_datatype(column_name, datatype, ghost_record_type, col_size) -%}
      
      {%- set beginning_of_all_times = datavault4coalesce__beginning_of_all_times() -%}
      {%- set end_of_all_times = datavault4coalesce__end_of_all_times() -%}
      {%- set timestamp_format = datavault4coalesce__timestamp_format() -%}
      
      {%- if ghost_record_type == 'unknown' -%}
           {%- if datatype in ['TIMESTAMP_NTZ','TIMESTAMP'] %}{{ datavault4coalesce__string_to_timestamp(timestamp_format, beginning_of_all_times) }} AS {{ column_name }}
           {% elif datatype in ['STRING','VARCHAR'] %}'(unknown)' AS {{ column_name }}
           {% elif datatype in ['NUMBER','INT','FLOAT','DECIMAL'] %}0 AS {{ column_name }}
           {% elif datatype == 'BOOLEAN' %}CAST('FALSE' AS BOOLEAN) AS {{ column_name }}
           {% else %}NULL AS {{ column_name }}
           {% endif %}
      {%- elif ghost_record_type == 'error' -%}
           {%- if datatype in ['TIMESTAMP_NTZ','TIMESTAMP'] %}{{ datavault4coalesce__string_to_timestamp(timestamp_format, end_of_all_times) }} AS {{ column_name }}
           {% elif datatype in ['STRING','VARCHAR'] %}'(error)' AS {{ column_name }}
           {% elif datatype in ['NUMBER','INT','FLOAT','DECIMAL'] %}-1 AS {{ column_name }}
           {% elif datatype == 'BOOLEAN' %}CAST('FALSE' AS BOOLEAN) AS {{ column_name }}
           {% else %}NULL AS {{ column_name }}
            {% endif %}
      {%- else -%}
          {%- if execute -%}
           {{ exceptions.raise_compiler_error("Invalid Ghost Record Type. Accepted are 'unknown' and 'error'.") }}
          {%- endif %}
      {%- endif -%}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__hash_default_values(hash_function, hash_datatype) -%}
      
          {%- set dict_result = {} -%}
      
          {%- if hash_function == 'MD5' and hash_datatype == 'STRING' -%}
              {%- set hash_alg = 'MD5' -%}
              {%- set unknown_key = "00000000000000000000000000000000" -%}
              {%- set error_key = "ffffffffffffffffffffffffffffffff" -%}
          {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' -%} 
              {%- if hash_datatype == 'STRING' -%}
                  {%- set hash_alg = 'SHA1' -%}
                  {%- set unknown_key = "0000000000000000000000000000000000000000" -%}
                  {%- set error_key = "ffffffffffffffffffffffffffffffffffffffff" -%}
              {%- elif hash_datatype == 'BINARY' -%}
                  {%- set hash_alg = 'SHA1_BINARY' -%}
                  {%- set unknown_key = "TO_BINARY(0000000000000000000000000000000000000000)" -%}
                  {%- set error_key = "TO_BINARY(ffffffffffffffffffffffffffffffffffffffff)" -%}        
              {%- endif -%}
          {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' -%}
              {%- if hash_datatype == 'STRING' -%}
                  {%- set hash_alg = 'SHA2' -%}
                  {%- set unknown_key = "0000000000000000000000000000000000000000000000000000000000000000" -%}
                  {%- set error_key = "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" -%}
              {%- elif hash_datatype == 'BINARY' -%}
                  {%- set hash_alg = 'SHA2_BINARY' -%}
                  {%- set unknown_key = "TO_BINARY(0000000000000000000000000000000000000000000000000000000000000000)" -%}
                  {%- set error_key = "TO_BINARY(ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)" -%}        
              {%- endif -%}   
          {%- endif -%}
      
          {%- do dict_result.update({"hash_alg": hash_alg, "unknown_key": unknown_key, "error_key": error_key }) -%}
      
          {{ return(dict_result | tojson ) }}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__prefix(columns=none, prefix_str=none, alias_target='source') -%}
      
          {%- if columns and prefix_str -%}
      
              {%- for col in columns -%}
      
                  {%- if col is mapping -%}
      
                      {%- if alias_target == 'source' -%}
      
                          {{- datavault4coalesce__prefix([col['source_column']], prefix_str) -}}
      
                      {%- elif alias_target == 'target' -%}
      
                          {{- datavault4coalesce__prefix([col['alias']], prefix_str) -}}
      
                      {%- else -%}
      
                          {{- datavault4coalesce__prefix([col['source_column']], prefix_str) -}}
      
                      {%- endif -%}
      
                      {%- if not loop.last -%} , {% endif %}
      
                  {%- else -%}
      
                      {%- if col is iterable and col is not string -%}
      
                          {{- datavault4coalesce__prefix(col, prefix_str) -}}
      
                      {%- elif col is not none -%}
      
                          {{- prefix_str}}.{{col.strip() -}}
                      {% else %}
      
                          {%- if execute -%}
                              {{- exceptions.raise_compiler_error("Unexpected or missing configuration for '" ~ this ~ "' Unable to prefix columns.") -}}
                          {%- endif -%}
                      {%- endif -%}
      
                      {{- ', ' if not loop.last -}}
      
                  {%- endif -%}
      
              {%- endfor -%}
      
          {%- else -%}
      
              {%- if execute -%}
                  {{- exceptions.raise_compiler_error("Invalid parameters provided to prefix macro. Expected: (columns [list/string], prefix_str [string]) got: (" ~ columns ~ ", " ~ prefix_str ~ ")") -}}
              {%- endif -%}
          {%- endif -%}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__source_columns(source_relation=none) -%}
      
          {%- if source_relation -%}
              {%- set source_model_cols = adapter.get_columns_in_relation(source_relation) -%}
      
              {%- set column_list = [] -%}
      
              {%- for source_col in source_model_cols -%}
                  {%- do column_list.append(source_col.column) -%}
              {%- endfor -%}
      
              {%- do return(column_list) -%}
          {%- endif %}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__concat_ws(string_list, separator="||") -%}
      
          {{  "CONCAT_WS('" ~ separator ~ "', " ~ string_list | join(", ") ~ ")" }}
      
      {%- endmacro -%}
      
      
      {%- macro datavault4coalesce__derive_columns(source_relation=none, columns=none) -%}
      
      {%- set exclude_columns = [] -%}
      {%- set include_columns = [] -%}
      {%- set src_columns = [] -%}
      {%- set der_columns = [] -%}
      
      {%- set source_cols = datavault4coalesce__source_columns(source_relation=source_relation) -%}
      
      {%- if columns is mapping and columns is not none -%}
      
          {#- Add aliases of derived columns to exclude and full SQL to include -#}
          {%- for col in columns -%}
      
              {%- if datavault4coalesce__is_list(columns[col]['value']) -%}
                  {%- set column_list = [] -%}
      
                  {%- for concat_component in columns[col]['value'] -%}
                      {%- set column_str = datavault4coalesce__as_constant(concat_component) -%}
                      {%- do column_list.append(column_str) -%}
                  {%- endfor -%}
                  {%- set concat = datavault4coalesce__concat_ws(column_list, "||") -%}
                  {%- set concat_string = concat ~ " AS " ~ datavault4coalesce__escape_column_names(col) -%}
      
                  {%- do der_columns.append(concat_string) -%}
                  {%- set exclude_columns = exclude_columns + columns[col]['value'] -%}
              {% else %}
                  {%- set column_str = datavault4coalesce__as_constant(columns[col]['value']) -%}
                  {%- do der_columns.append(column_str ~ " AS " ~ datavault4coalesce__escape_column_names(col)) -%}
                  {%- do exclude_columns.append(col) -%}
              {% endif %}
      
          {%- endfor -%}
      
          {#- Add all columns from source_model relation -#}
          {%- if source_relation is defined and source_relation is not none -%}
      
              {%- for col in source_cols -%}
                  {%- if col not in exclude_columns -%}
                      {%- do src_columns.append(datavault4coalesce__escape_column_names(col)) -%}
                  {%- endif -%}
              {%- endfor -%}
      
          {%- endif -%}
      
          {#- Makes sure the columns are appended in a logical order. Source columns then derived columns -#}
          {%- set include_columns = src_columns + der_columns -%}
      
              {#- Print out all columns in includes -#}
              {%- for col in include_columns -%}
                  {{- col | indent(4) -}}{{ ",\n" if not loop.last }}
              {%- endfor -%}
          {%- else -%}
              {%- if execute -%}
                  {{ exceptions.raise_compiler_error("Invalid column configuration:
                  expected format: {'source_relation': Relation, 'columns': {column_name: column_value}}
                  got: {'source_relation': " ~ source_relation ~ ", 'columns': " ~ columns ~ "}") }}
              {%- endif %}
          {%- endif %}
      {%- endmacro -%}
packages:
  COALESCE-DATA_VAULT:
    addedBy: K2XWoywkSJObLCIwZGW4xprzNYo2
    createdAt:
      nanoseconds: 1000000
      seconds: 1661791225
    id: COALESCE-DATA_VAULT
    manifest:
      macros: {}
      stepTypes:
        COALESCE-DATA_VAULT::1:
          id: COALESCE-DATA_VAULT::1
          name: "DV Package: Hub"
        COALESCE-DATA_VAULT::2:
          id: COALESCE-DATA_VAULT::2
          name: "DV Package: Link"
        COALESCE-DATA_VAULT::3:
          id: COALESCE-DATA_VAULT::3
          name: "DV Package: Satellite"
        COALESCE-DATA_VAULT::4:
          id: COALESCE-DATA_VAULT::4
          name: "DV Package: Link Satellite"
        COALESCE-DATA_VAULT::5:
          id: COALESCE-DATA_VAULT::5
          name: "DV Package: Satellite Multi-Active"
        COALESCE-DATA_VAULT::6:
          id: COALESCE-DATA_VAULT::6
          name: "DV Package: Effectivity Satellite"
        COALESCE-DATA_VAULT::7:
          id: COALESCE-DATA_VAULT::7
          name: "DV Package: BV Sat Current View"
    status: added
    version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    versionInfo:
      commit: fcb60873d720b0641e2d837fece6af7043d76ea4
projects: {}
stepTypes:
  StepType-1:
    id: "1"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: New Type
        short: NEW
        tagColor: gray
        plural: New Types
      templates:
        create:
          templateString: ""
        run:
          templateString: ""
    name: New Type
    version: 1
  StepType-2:
    id: "2"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: New Type
        short: NEW
        tagColor: gray
        plural: New Types
      templates:
        create:
          templateString: ""
        run:
          templateString: ""
    name: New Type
    version: 1
  StepType-3:
    id: "3"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: New Type
        short: NEW
        tagColor: gray
        plural: New Types
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'view' %}
            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }} AS (

            {% if (source_model is none) and execute %}

                {%- set error_message -%}
                Staging error: Missing source_model configuration. A source model name must be provided.
                e.g.
                [REF STYLE]
                source_model: model_name
                OR
                [SOURCES STYLE]
                source_model:
                    source_name: source_table_name
                {%- endset -%}

                {{- exceptions.raise_compiler_error(error_message) -}}
            {%- endif -%}

            {#- Check for source format or ref format and create relation object from source_model -#}
            {% if source_model is mapping and source_model is not none -%}

                {%- set source_name = source_model | first -%}
                {%- set source_table_name = source_model[source_name] -%}

                {%- set source_relation = source(source_name, source_table_name) -%}
                {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}

            {%- elif source_model is not mapping and source_model is not none -%}

                {%- set source_relation = ref(source_model) -%}
                {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}
            {%- else -%}
                {%- set all_source_columns = [] -%}
            {%- endif -%}


            {# Setting the column name for load date timestamp and record source to the alias coming from the attributes #}
            {%- set ldts_alias = var('datavault4dbt.ldts_alias', 'ldts') -%}
            {%- set rsrc_alias = var('datavault4dbt.rsrc_alias', 'rsrc') -%}
            {%- set copy_input_columns = var('datavault4dbt.copy_rsrc_ldts_input_columns', false) -%}
            {%- set load_datetime_col_name = ldts_alias -%}
            {%- set record_source_col_name = rsrc_alias -%}

            {%- set ldts_rsrc_input_column_names = [] -%}
            {%- if datavault4dbt.is_attribute(ldts) -%}
              {%- if not copy_input_columns -%}
                  {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}
              {%- else -%}
                
                {%- if ldts|lower == ldts_alias|lower -%}
                  {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}
                {%- endif -%}

              {%- endif %}

            {%- endif -%}

            {%- if datavault4dbt.is_attribute(rsrc) -%}

              {%- if not copy_input_columns -%}
                {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}
              {%- else -%}
              
                {%- if rsrc|lower == rsrc_alias|lower -%}
                  {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}
                {%- endif -%}

              {%- endif -%}

            {%- endif %}

            {%- if sequence is not none -%}
              {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [sequence] -%}
            {%- endif -%}

            {%- set ldts = datavault4dbt.as_constant(ldts) -%}
            {%- set rsrc = datavault4dbt.as_constant(rsrc) -%}

            {# Getting the column names for all additional columns #}
            {%- set derived_column_names = datavault4dbt.extract_column_names(derived_columns) -%}
            {%- set hashed_column_names = datavault4dbt.extract_column_names(hashed_columns) -%}
            {%- set prejoined_column_names = datavault4dbt.extract_column_names(prejoined_columns) -%}
            {%- set missing_column_names = datavault4dbt.extract_column_names(missing_columns) -%}
            {%- set exclude_column_names = derived_column_names + hashed_column_names + prejoined_column_names + missing_column_names + ldts_rsrc_input_column_names %}
            {%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | unique | list -%}
            {%- set all_columns = adapter.get_columns_in_relation( source_relation ) -%}

            {%- set columns_without_excluded_columns = [] -%}
            {%- set final_columns_to_select = [] -%}


            {%- if include_source_columns -%}
              {%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_source_columns, exclude_column_names) | list -%}

              {%- for column in all_columns -%}

                {%- if column.name|lower not in exclude_column_names|map('lower') %}
                  {%- do columns_without_excluded_columns.append(column) -%}
                {%- endif -%}

              {%- endfor -%}
            {%- else -%}
              
              {# Include from the source only the input columns needed #}
              {# Getting the input columns for the additional columns #}
              {%- set derived_input_columns = datavault4dbt.extract_input_columns(derived_columns) -%}
              {%- set hashed_input_columns = datavault4dbt.expand_column_list(datavault4dbt.extract_input_columns(hashed_columns)) -%}
              {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, derived_column_names) -%}
              {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, prejoined_column_names) -%}
              {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, missing_column_names) -%}  {# Excluding the names of the missing columns. #}
              {%- set prejoined_input_columns = datavault4dbt.extract_input_columns(prejoined_columns) -%}
              {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns) | unique | list -%}
              {%- set source_columns_to_select = only_include_from_source -%}

            {%- endif-%}

            {%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}
            {%- set derived_columns_to_select = datavault4dbt.process_columns_to_select(source_and_derived_column_names, hashed_column_names) | unique | list -%}

            {%- if datavault4dbt.is_something(derived_columns) %}
              {#- Getting Data types for derived columns with detection from source relation -#}
              {%- set derived_columns_with_datatypes = datavault4dbt.derived_columns_datatypes(derived_columns, source_relation) -%}
              {%- set derived_columns_with_datatypes_DICT = fromjson(derived_columns_with_datatypes) -%}
            {%- endif -%}
            {#- Select hashing algorithm -#}

            {#- Setting unknown and error keys with default values for the selected hash algorithm -#}
            {%- set hash = var('datavault4dbt.hash', 'MD5') -%}
            {%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}
            {%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}
            {%- set hash_alg = hash_default_values['hash_alg'] -%}
            {%- set unknown_key = hash_default_values['unknown_key'] -%}
            {%- set error_key = hash_default_values['error_key'] -%}

            {# Select timestamp and format variables #}
            {%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}
            {%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}
            {%- set timestamp_format = datavault4dbt.timestamp_format() -%}

            {# Setting the error/unknown value for the record source  for the ghost records#}
            {% set error_value_rsrc = var('datavault4dbt.default_error_rsrc', 'ERROR') %}
            {% set unknown_value_rsrc = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') %}

            {# Setting the rsrc default datatype and length #}
            {% set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'STRING') %}

            WITH

            {# Selecting everything that we need from the source relation. #}
            source_data AS (
                SELECT

                {{- "\n\n    " ~ datavault4dbt.print_list(datavault4dbt.escape_column_names(all_source_columns)) if all_source_columns else " *" }}

              FROM {{ source_relation }}

              {% set last_cte = "source_data" -%}
            ),


            {% set alias_columns = [load_datetime_col_name, record_source_col_name] %}

            {# Selecting all columns from the source data, renaming load date and record source to global aliases #}
            ldts_rsrc_data AS (

              SELECT
                {{ ldts }} AS {{ load_datetime_col_name}},
                CAST( {{ rsrc }} as {{ rsrc_default_dtype }} ) AS {{ record_source_col_name }}
                {%- if sequence is not none %},
                  {{ sequence }} AS edwSequence
                  {%- set alias_columns = alias_columns + ['edwSequence'] -%}
                {% endif -%}

                {%- if source_columns_to_select is not none and source_columns_to_select | length > 0 %},
                  {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(source_columns_to_select)) }}
                {% endif -%}
                {{"\n"}}
              FROM {{ last_cte }}

              {%- set last_cte = "ldts_rsrc_data" -%}
              {%- set final_columns_to_select = alias_columns + final_columns_to_select  %}
            ),

            {%- if datavault4dbt.is_something(missing_columns) %}

            {# Filling missing columns with NULL values for schema changes #}
            missing_columns AS (

              SELECT

              {% if final_columns_to_select | length > 0 -%}
                {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},
              {%- endif %}
              {%- for col, dtype in missing_columns.items() %}
                CAST(NULL as {{ dtype }}) as {{ col }}{% if not loop.last %},{% endif -%}

              {% endfor %}

              FROM {{ last_cte }}
              {%- set last_cte = "missing_columns" -%}
              {%- set final_columns_to_select = final_columns_to_select + missing_column_names %}
            ),
            {%- endif -%}

            {%- if datavault4dbt.is_something(prejoined_columns) %}
            {# Prejoining Business Keys of other source objects for Link purposes #}
            prejoined_columns AS (

              SELECT
              {% if final_columns_to_select | length > 0 -%}
                {{ datavault4dbt.print_list(datavault4dbt.prefix(columns=datavault4dbt.escape_column_names(final_columns_to_select), prefix_str='lcte').split(',')) }}
              {% endif %}
              {%- for col, vals in prejoined_columns.items() -%}
                ,pj_{{loop.index}}.{{ vals['bk'] }} AS {{ col }}
              {% endfor -%}

              FROM {{ last_cte }} lcte

              {%- for col, vals in prejoined_columns.items() %}
                left join {{ source(vals['src_name']|string, vals['src_table']) }} as pj_{{loop.index}} on lcte.{{ vals['this_column_name'] }} = pj_{{loop.index}}.{{ vals['ref_column_name'] }}
              {% endfor %}

              {% set last_cte = "prejoined_columns" -%}
              {%- set final_columns_to_select = final_columns_to_select + prejoined_column_names %}
            ),
            {%- endif -%}


            {%- if datavault4dbt.is_something(derived_columns) %}
            {# Adding derived columns to the selection #}
            derived_columns AS (

              SELECT
              {% if final_columns_to_select | length > 0 -%}
                {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},
              {% endif %}
              {{ datavault4dbt.derive_columns(columns=derived_columns) | indent(4) }}

              FROM {{ last_cte }}
              {%- set last_cte = "derived_columns" -%}
              {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}
            ),
            {%- endif -%}

            {%- if datavault4dbt.is_something(hashed_columns) and hashed_columns is mapping %}
            {# Generating Hashed Columns (hashkeys and hashdiffs for Hubs/Links/Satellites) #}
            {% if datavault4dbt.is_something(multi_active_config) %}

            hashed_columns AS (

                SELECT

                {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},

                {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}
                {{- datavault4dbt.hash_columns(columns=processed_hash_columns, multi_active_key=multi_active_config['multi_active_key'], main_hashkey_column=multi_active_config['main_hashkey_column']) | indent(4) }}

                FROM {{ last_cte }}
                {%- set last_cte = "hashed_columns" -%}
                {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}

            ),

            {% else %}

            {# Hash calculation for single-active source data. #}
            hashed_columns AS (

                SELECT

                {% if final_columns_to_select | length > 0 -%}
                  {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},
                {% endif %}

                {%- set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}
                {{ datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}

                FROM {{ last_cte }}
                {%- set last_cte = "hashed_columns" -%}
                {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}
              
            ),

            {%- endif -%}
            {%- endif -%}

            {# Creating Ghost Record for unknown case, based on datatype #}
            unknown_values AS (
              
                SELECT

                {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} as {{ load_datetime_col_name }},
                '{{ unknown_value_rsrc }}' as {{ record_source_col_name }}

                {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},
                {# Generating Ghost Records for all source columns, except the ldts, rsrc & edwSequence column #}
                  {%- for column in columns_without_excluded_columns %}
                    {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='unknown') }}
                    {%- if not loop.last %},{% endif -%}
                  {%- endfor -%}

                {%- endif -%}

                {%- if datavault4dbt.is_something(missing_columns) -%},
                {# Additionally generating ghost record for missing columns #}
                  {%- for col, dtype in missing_columns.items() %}
                    {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='unknown') }}
                    {%- if not loop.last %},{% endif -%}
                  {%- endfor -%}
                {%- endif -%}

                {%- if datavault4dbt.is_something(prejoined_columns) -%},
                {# Additionally generating ghost records for the prejoined attributes#}
                  {% for col, vals in prejoined_columns.items() %}

                    {%- set pj_relation_columns = adapter.get_columns_in_relation( source(vals['src_name']|string, vals['src_table']) ) -%}

                      {% for column in pj_relation_columns -%}

                        {% if column.name|lower == vals['bk']|lower -%}
                          {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=column.dtype, ghost_record_type='unknown') }}
                        {%- endif -%}

                      {%- endfor -%}
                      {%- if not loop.last %},{% endif %}
                    {% endfor -%}
                {%- endif %}

                {%- if datavault4dbt.is_something(derived_columns) -%},
                {# Additionally generating Ghost Records for Derived Columns #}
                  {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}
                    {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, ghost_record_type='unknown') }}
                    {%- if not loop.last %},{% endif -%}
                  {%- endfor -%}

                {%- endif -%}

                {%- if datavault4dbt.is_something(processed_hash_columns) -%},

                  {%- for hash_column in processed_hash_columns %}
                    CAST('{{ unknown_key }}' as {{ hash_dtype }}) as {{ hash_column }}
                    {%- if not loop.last %},{% endif %}
                  {%- endfor -%}

                {%- endif -%}
                {{-"\n"-}}
            ),

            {# Creating Ghost Record for error case, based on datatype #}
            error_values AS (

                SELECT

                {{ datavault4dbt.string_to_timestamp(timestamp_format , end_of_all_times) }} as {{ load_datetime_col_name }},
                '{{ error_value_rsrc }}' as {{ record_source_col_name }}

                {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},
                {# Generating Ghost Records for Source Columns #}
                  {%- for column in columns_without_excluded_columns %}
                    {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='error') }}
                    {%- if not loop.last %},{% endif -%}
                  {%- endfor -%}

                {%- endif -%}

                {%- if datavault4dbt.is_something(missing_columns) -%},
                {# Additionally generating ghost record for Missing columns #}
                  {%- for col, dtype in missing_columns.items() %}
                    {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='error') }}
                    {%- if not loop.last %},{% endif -%}
                  {%- endfor -%}
                {%- endif -%}

                {%- if datavault4dbt.is_something(prejoined_columns) -%},
                {# Additionally generating ghost records for the prejoined attributes #}
                  {%- for col, vals in prejoined_columns.items() %}

                    {%- set pj_relation_columns = adapter.get_columns_in_relation( source(vals['src_name']|string, vals['src_table']) ) -%}

                    {% for column in pj_relation_columns -%}
                      {% if column.name|lower == vals['bk']|lower -%}
                        {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=column.dtype, ghost_record_type='error') -}}
                      {%- endif -%}
                    {%- endfor -%}
                      {%- if not loop.last -%},{%- endif %}
                  {% endfor -%}

                {%- endif -%}

                {%- if datavault4dbt.is_something(derived_columns) %},
                {# Additionally generating Ghost Records for Derived Columns #}
                  {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}
                    {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, ghost_record_type='error') }}
                    {%- if not loop.last %},{% endif %}
                  {%- endfor -%}

                {%- endif -%}

                {%- if datavault4dbt.is_something(processed_hash_columns) -%},

                  {%- for hash_column in processed_hash_columns %}
                    CAST('{{ error_key }}' as {{ hash_dtype }}) as {{ hash_column }}
                    {%- if not loop.last %},{% endif %}
                  {%- endfor -%}

                {%- endif -%}
                {{- "\n" -}}
            ),

            {# Combining all previous ghost record calculations to two rows with the same width as regular entries #}
            ghost_records AS (
                SELECT * FROM unknown_values
                UNION ALL
                SELECT * FROM error_values
            ),

            {%- if not include_source_columns -%}
              {% set final_columns_to_select = datavault4dbt.process_columns_to_select(columns_list=final_columns_to_select, exclude_columns_list=source_columns_to_select) %}
            {%- endif -%}

            {# Combining the two ghost records with the regular data #}
            columns_to_select AS (

                SELECT

                {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}

                FROM {{ last_cte }}

                UNION ALL
                
                SELECT

                {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}

                FROM ghost_records
            )

            SELECT * FROM columns_to_select

            )
            {% endif %}
        run:
          templateString: |-
            {% if node.materializationType == 'view' %}
            CREATE OR REPLACE VIEW 
    name: Datavault4Coalesce - Stage
    version: 1
  StepType-4:
    id: "4"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: "Datavault4Coalesce: Stage"
    version: 1
  StepType-COALESCE-DATA_VAULT::1:
    id: COALESCE-DATA_VAULT::1
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: HUB
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            options: 
            - table
            default: table

          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: true

          - type: multisourceToggle
          
        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {{ stage('Create Hub Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
            	{{ stage('Pre-SQL') }}
            	{{ config.preSQL }}
            {% endif %}

            {% for source in sources %}

            	{{ stage('Merge Hub - ' ~ source.name) }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		SELECT DISTINCT
            		{% for col in source.columns %}
            			{{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.isHubHash) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)

            {% endfor %}

            {% if config.postSQL %}
            	{{ stage('Post-SQL') }}
            	{{ config.postSQL }}
            {% endif %}
    name: "DV Package: Hub"
    packageInfo:
      id: COALESCE-DATA_VAULT
      version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    version: 1
  StepType-COALESCE-DATA_VAULT::2:
    id: COALESCE-DATA_VAULT::2
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: LINK
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            default: table
            options:
            - table

          - displayName: Insert Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true

          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {{ stage('Create Link Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
                {{ stage('Pre-SQL') }}
                {{ config.preSQL }}

            {% endif %}

            {% for source in sources %}
                        
                {{ stage('Merge Link - ' ~ source.name) }}
                MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
                (
                    SELECT DISTINCT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {{ config.insertStrategy }}
                    {% endif %}
                )
                AS "SRC"
                ON
                {% for col in sources[0].columns if (col.isLinkHash) -%}
                    {% if not loop.first %}
                        AND
                    {% endif %}
                    "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                {% endfor %}
                WHEN NOT MATCHED THEN
                INSERT
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                ) VALUES
                (
                    {% for col in columns %}
                        "SRC"."{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )

            {% endfor %}

            {% if config.postSQL %}
                {{ stage('Post-SQL') }}
                {{ config.postSQL }}    
            {% endif %}
    name: "DV Package: Link"
    packageInfo:
      id: COALESCE-DATA_VAULT
      version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    version: 1
  StepType-COALESCE-DATA_VAULT::3:
    id: COALESCE-DATA_VAULT::3
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: SATELLITE
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            default: table
            options:
            - table

          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: true

          - displayName: Change Hash Column
            type: columnSelector
            attributeName: isChangeHash
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |
            {{ stage('Create Satellite Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
            	{{ stage('Pre-SQL') }}
            	{{ config.preSQL }}
            {% endif %}

            {{ stage('Insert New Rows') }}
            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            WITH "SAT_CURR_ROWS" AS (
            	/* get current rows from satellite */
            	{% for col in columns if col.isHubHash or col.isChangeHash %}
            		{%- if loop.first -%}SELECT {% endif %} 
            		"{{col.name}}"
            		{%- if not loop.last -%}, {% endif %}
            		{%- if loop.last %} 
            			FROM {{ ref_no_link(node.location.name, node.name) }} 
            			QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isHubHash") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
            		{% endif %}
            	{% endfor %}
            )

            	{% for source in sources %}
            		SELECT DISTINCT
            		{% for col in source.columns %}
            			{{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}
            	WHERE NOT EXISTS(
            		SELECT 1 FROM "SAT_CURR_ROWS"
            		WHERE 
            		{% for col in source.columns if col.isHubHash or col.isChangeHash %}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			{{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
            		{% endfor %}
            	)

            	{% endfor %}

            {% if config.postSQL %}
            	{{ stage('Post-SQL') }}
            	{{ config.postSQL }}
            {% endif %}
    name: "DV Package: Satellite"
    packageInfo:
      id: COALESCE-DATA_VAULT
      version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    version: 1
  StepType-COALESCE-DATA_VAULT::4:
    id: COALESCE-DATA_VAULT::4
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: LINK SATELLITE
        short: 'LSAT'
        plural: 'Link Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            default: table
            options:
            - table

          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: true

          - displayName: Change Hash Column
            type: columnSelector
            attributeName: isChangeHash
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {{ stage('Create Link Satellite Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
                {{ stage('Pre-SQL') }}
                {{ config.preSQL }}
            {% endif %}

            {{ stage('Insert New Rows') }}
            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            WITH "SAT_CURR_ROWS" AS (
                /* get current rows from satellite */
                {% for col in columns if col.isLinkHash or col.isChangeHash %}
                    {%- if loop.first -%}SELECT {% endif %} 
                    "{{col.name}}"
                    {%- if not loop.last -%}, {% endif %}
                    {%- if loop.last %} 
                        FROM {{ ref_no_link(node.location.name, node.name) }} 
                        QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isLinkHash") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
                    {% endif %}
                {% endfor %}
            )

                {% for source in sources %}
                    SELECT DISTINCT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}
                WHERE NOT EXISTS(
                    SELECT 1 FROM "SAT_CURR_ROWS"
                    WHERE 
                    {% for col in source.columns if col.isLinkHash or col.isChangeHash %}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        {{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
                    {% endfor %}
                )

                {% endfor %}

            {% if config.postSQL %}
                {{ stage('Post-SQL') }}
                {{ config.postSQL }}
            {% endif %}
    name: "DV Package: Link Satellite"
    packageInfo:
      id: COALESCE-DATA_VAULT
      version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    version: 1
  StepType-COALESCE-DATA_VAULT::5:
    id: COALESCE-DATA_VAULT::5
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: SATELLITE MULTI-ACTIVE
        short: 'SAT_MA'
        plural: 'Satellites Multi-Active'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            default: table
            options:
            - table

          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: false

          - displayName: Change Hash Column
            type: columnSelector
            attributeName: isChangeHash
            isRequired: false

          - displayName: Multi-Active Column
            type: columnSelector
            attributeName: isMAAttrib
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false
      templates:
        create:
          templateString: |-
            {{ stage('Create Satellite Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            {% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
            	{{ stage('Pre-SQL') }}
            	{{ config.preSQL }}
            {% endif %}

            {{ stage('Insert New Rows') }}
            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            WITH "SAT_CURR_ROWS" AS (
            	/* get current rows from satellite */
            	{% for col in columns if col.isHubHash or col.isChangeHash or col.isMAAttrib %}
            		{%- if loop.first -%}SELECT {% endif %} 
            		{{col.name}}
            		{%- if not loop.last -%}, {% endif %}
            		{%- if loop.last %} 
            			FROM {{ ref_no_link(node.location.name, node.name) }} 
            			QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isHubHash") }}","{{ get_value_by_column_attribute("isMAAttrib") }}" ORDER BY LOAD_DATE DESC) = 1
            		{% endif %}
            	{% endfor %}
            )

            	{% for source in sources %}
            		SELECT DISTINCT
            		{% for col in source.columns %}
            			{{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}
            	WHERE NOT EXISTS(
            		SELECT 1 FROM "SAT_CURR_ROWS"
            		WHERE 
            		{% for col in source.columns if col.isHubHash or col.isChangeHash or col.isMAAttrib %}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			{{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
            		{% endfor %}
            	)

            	{% endfor %}

            {% if config.postSQL %}
            	{{ stage('Post-SQL') }}
            	{{ config.postSQL }}
            {% endif %}
    name: "DV Package: Satellite Multi-Active"
    packageInfo:
      id: COALESCE-DATA_VAULT
      version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    version: 1
  StepType-COALESCE-DATA_VAULT::6:
    id: COALESCE-DATA_VAULT::6
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Effectivity Satellite
        short: 'SAT_EFF'
        plural: 'Effectivity Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            default: table
            options:
            - table

          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: false

          - displayName: Driving Key Column
            type: columnSelector
            attributeName: isDrivingKey
            isRequired: false


        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {{ stage('Create Effectivity Satellite Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
                {{ stage('Pre-SQL') }}
                {{ config.preSQL }}
            {% endif %}

            {{ stage('Insert New Rows') }}
            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            WITH "SAT_CURR_ROWS" AS (
                /* get current rows from satellite */
                {% for col in columns if col.isDrivingKey or col.isLinkHash %}
                    {%- if loop.first -%}SELECT {% endif %} 
                    {{col.name}}
                    {%- if not loop.last -%}, {% endif %}
                    {%- if loop.last %} 
                        FROM {{ ref_no_link(node.location.name, node.name) }} 
                        QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isDrivingKey") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
                    {% endif %}
                {% endfor %}
            )

                {% for source in sources %}
                    SELECT DISTINCT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}
                WHERE NOT EXISTS(
                    SELECT 1 FROM "SAT_CURR_ROWS"
                    WHERE 
                    {% for col in source.columns if col.isDrivingKey or col.isLinkHash %}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        {{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
                    {% endfor %}
                )

                {% endfor %}

            {% if config.postSQL %}
                {{ stage('Post-SQL') }}
                {{ config.postSQL }}
            {% endif %}
    name: "DV Package: Effectivity Satellite"
    packageInfo:
      id: COALESCE-DATA_VAULT
      version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    version: 1
  StepType-COALESCE-DATA_VAULT::7:
    id: COALESCE-DATA_VAULT::7
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: BV SAT CURRENT VIEW
        short: SAT_CURR
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: BV Sat Current Views

        config:
        - groupName: Options
          items:
          - displayName: Sat Hash Column(s) (Include Multi-Active)
            type: columnSelector
            attributeName: isSatKey
            isRequired: true

          - displayName: Sat Date Column(s)
            type: columnSelector
            attributeName: isDateColumn
            isRequired: true

          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            options: 
            - view
            default: view
      templates:
        create:
          templateString: |-
            {{ stage('Create View') }}

            {% set order_by = namespace(order_by_txt='') %}
            {% set partition_by = namespace(partition_by_txt='') %}


            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    
                            {%- if col.isDateColumn  %} 
                        {%- if order_by.order_by_text  | length >= 1 %}{% set order_by.order_by_text = order_by.order_by_text + ',"' + col.name + '"' %}{% endif %} 
                        {%- if order_by.order_by_text  | length == 0 %}{% set order_by.order_by_text = '"' + col.name + '"' %}{% endif %}
                {% endif %} 

                {%- if col.isSatKey  %} 
                        {%- if partition_by.partition_by_text  | length >= 1 %}{% set partition_by.partition_by_text = partition_by.partition_by_text + ',"' + col.name + '"' %}{% endif %} 
                        {%- if partition_by.partition_by_text  | length == 0 %}{% set partition_by.partition_by_text = '"'+ col.name + '"' %}{% endif %}
                {% endif %}  


                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            AS
            {% for source in sources %}
                SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                {% for col in source.columns %}
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                
                {{ source.join }}
                QUALIFY LEAD({{order_by.order_by_text}}) 
                        OVER (PARTITION BY {{partition_by.partition_by_text}} 
                            ORDER BY {{order_by.order_by_text}} ASC) IS NULL


            {% endfor %}
        run:
          templateString: ""
    name: "DV Package: BV Sat Current View"
    packageInfo:
      id: COALESCE-DATA_VAULT
      version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Hub:
    id: Hub
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            default: table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}


            	{{ stage('Merge Hub') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isHubHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)


            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Hub
    version: 1
  StepType-Link:
    id: Link
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Link
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Link Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	
            	{% endif %}

            			
            	{{ stage('Merge Link') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isLinkHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Link
    version: 1
  StepType-Satellite:
    id: Satellite
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Satellite Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            		{% if config.preSQL %}
            			{{ stage('Pre-SQL') }}
            			{{ config.preSQL }}
            		{% endif %}
            	
            		{{ stage('Merge Satellite') }}
            		MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            		(
            			{% for source in sources %}
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if not loop.last %}
            				{{ config.insertStrategy }}
            			{% endif %}
            		{% endfor %}
            		)
            		AS "SRC"
            		ON
            		{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                        and col.sourceColumns[0].column 
                                                        and col.sourceColumns[0].column.isChangeHash
                                                        ) -%}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            		{% endfor %}
            		WHEN NOT MATCHED THEN
            		INSERT
            		(
            			{% for col in columns %}
            				"{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		) VALUES
            		(
            			{% for col in columns %}
            				"SRC"."{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		)
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Satellite
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs:
  Subgraph-2:
    id: 2
    name: Line Item
    steps:
      - "31"
      - "33"
      - "34"
      - "37"
      - "39"
      - "44"
      - "45"
      - "46"
      - "51"
      - "53"
      - "80"
      - "84"
      - "86"
      - "93"
      - "94"
      - "95"
      - "98"
      - "101"
      - "102"
      - "104"
      - "106"
      - "107"
      - "108"
      - "109"
  Subgraph-3:
    id: 3
    name: Orders
    steps:
      - "30"
      - "33"
      - "38"
      - "39"
      - "86"
      - "93"
      - "102"
      - "107"
      - "113"
      - "114"
version: 1

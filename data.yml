defaultStorageMapping: CORE
jobs:
  Job-1:
    id: 1
    name: New Job
    steps: []
    subgraphs: []
locations:
  CORE:
    mappingDefinitions:
      "3":
        database: COALESCE_WORKSHOP
        schema: CORE
  EXTERNAL_TABLES:
    mappingDefinitions:
      "3":
        database: COALESCE_WORKSHOP
        schema: EXTERNAL_TABLES
  RAW_STAGE:
    mappingDefinitions:
      "3":
        database: COALESCE_WORKSHOP
        schema: RAW_STAGE
  TPCH_SF1:
    mappingDefinitions:
      "3":
        database: SNOWFLAKE_SAMPLE_DATA
        schema: TPCH_SF1
macros:
  Macro-1:
    id: "1"
    macroString: |-
      {%- set datavault4coalesce = namespace(

           config = {
           "ldts_alias": "LDTS",
           "rsrc_alias": "RSRC", 
           "ledts_alias": "LEDTS", 
           "snapshot_trigger_column": "IS_ACTIVE",
           "sdts_alias": "SDTS", 
           "stg_alias": "STG", 
           "is_current_col_alias": "IS_CURRENT", 
           "hash": "MD5", 
           "hash_datatype": "STRING", 
           "hashkey_input_case_sensitive": "FALSE", 
           "hashdiff_input_case_sensitive": "TRUE",
           "copy_rsrc_ldts_input_columns": "false",  
           "beginning_of_all_times": "0001-01-01T00:00:01", 
           "end_of_all_times": "8888-12-31T23:59:59",
           "timestamp_format": "YYYY-MM-DDTHH24:MI:SS", 
           "default_unknown_rsrc": "SYSTEM", 
           "default_error_rsrc": "ERROR", 
           "rsrc_default_dtype": "STRING", 
           "stg_default_dtype": "STRING", 
           "derived_columns_default_dtype": "STRING",
           "error_value__STRING": "'(error)'", 
           "error_value_alt__STRING": "'e'", 
           "unknown_value__STRING": "'(unknown)'",
           "unknown_value_alt__STRING": "'u'"
           }

      ) -%}


      {%- macro datavault4coalesce__string_to_timestamp(format, timestamp) -%}
          TO_TIMESTAMP('{{ timestamp }}', '{{ format }}')
      {%- endmacro -%}


      {%-macro record_source()-%}
      {#--USAGE:{{record_source()}}#}
      {#--NOTES:Adds a Record Source (name of qualified previous table/view)#}
      {% set src = storageLocations | selectattr('name', "equalto", sources[0].dependencies[0].node.location.name) | list | first %} 
      '"{{src.database}}"."{{src.schema}}"."{{sources[0].dependencies[0].node.name}}"'
      {%- endmacro -%}


      {%- macro datavault4coalesce__is_expression(obj) -%}

           {%- if obj is string -%}
                {%- if (obj|first == "'" and obj|last == "'") or ("(" in obj and ")" in obj) or "::" in obj or "||" in obj -%}
                     {{ true }}
                {%- else -%}
                     {{ false }}
                {%- endif -%}
           {%- else -%}
                {{ false }}
           {%- endif -%}

      {%- endmacro -%}


      {%- macro datavault4coalesce__escape_column_name(column) -%}

           {%- set escape_char_left  = '"' -%}
           {%- set escape_char_right = '"' -%}

           {%- set escaped_column_name = escape_char_left ~ column|upper|replace(escape_char_left, '')|replace(escape_char_right, '')|trim ~ escape_char_right|indent(4) -%}

           {{ escaped_column_name }}

      {%- endmacro -%}


      {%- macro datavault4coalesce__as_constant(column_str) -%}

           {%- if column_str is not none and column_str is string and column_str -%}
                {%- if column_str|first == "!" -%}
                     {{- "'" ~ column_str[1:] ~ "'" -}}
                {%- else -%}
                     {%- if datavault4coalesce__is_expression(column_str) -%}
                          {{- column_str -}}
                     {%- else -%}
                          {{- datavault4coalesce__escape_column_names(column_str) -}}
                     {%- endif -%}
                {%- endif -%}
           {%- endif -%}
      {%- endmacro -%}


      {%- macro datavault4coalesce__ghost_record_per_datatype(column_name, datatype, ghost_record_type, hash) -%}

      {%- set beginning_of_all_times = datavault4coalesce.config.beginning_of_all_times -%}
      {%- set end_of_all_times = datavault4coalesce.config.end_of_all_times -%}
      {%- set timestamp_format = datavault4coalesce.config.timestamp_format -%}
      {%- set unknown_value__STRING = datavault4coalesce.config.unknown_value__STRING -%}
      {%- set unknown_value_alt__STRING = datavault4coalesce.config.unknown_value_alt__STRING -%}
      {%- set error_value__STRING = datavault4coalesce.config.error_value__STRING -%}
      {%- set error_value_alt__STRING = datavault4coalesce.config.error_value_alt__STRING -%}

      {%- set hash_datatype = datavault4coalesce.config.hash_datatype -%}

      {%- set hash_alg = datavault4coalesce__hash_algorithm() -%}
      {%- set unknown_key = datavault4coalesce__unknown_key() -%}
      {%- set error_key = datavault4coalesce__error_key() -%}

      {%- if hash %}

           {%- if ghost_record_type == 'unknown' -%}
                {{ unknown_key }} as {{ column_name }}
           {%- elif ghost_record_type == 'error' -%}
                {{ error_key }} as {{ column_name }}
           {% endif %}

      {% else %}

           {%- if ghost_record_type == 'unknown' -%}
           {%- if datatype in ['TIMESTAMP_NTZ','TIMESTAMP', 'DATE'] -%}{{ datavault4coalesce__string_to_timestamp(timestamp_format, beginning_of_all_times) }} AS {{ column_name }}
           {% elif datatype.upper().startswith('STRING') or datatype.upper().startswith('VARCHAR') %}
                {%- if datatype.upper().startswith('VARCHAR') and datatype[8:-1]|int >= unknown_value__STRING|length -%} {{unknown_value__STRING}} AS {{ column_name }}
                {%- elif datatype.upper().startswith('STRING') -%} {{unknown_value__STRING}} AS {{ column_name }}
                {% else %} {{unknown_value_alt__STRING}} AS {{ column_name }}
                {% endif %}
           {% elif datatype in ['NUMBER','INT','FLOAT','DECIMAL'] or datatype.upper().startswith('NUMBER') %}0 AS {{ column_name }}
           {% elif datatype == 'BOOLEAN' %}CAST('FALSE' AS BOOLEAN) AS {{ column_name }}
           {% else %}NULL AS {{ column_name }}
           {% endif %}
           {%- elif ghost_record_type == 'error' -%}
           {%- if datatype in ['TIMESTAMP_NTZ','TIMESTAMP', 'DATE'] -%}{{ datavault4coalesce__string_to_timestamp(timestamp_format, end_of_all_times) }} AS {{ column_name }}
           {% elif datatype.upper().startswith('STRING') or datatype.upper().startswith('VARCHAR') %}
                {%- if datatype.upper().startswith('VARCHAR') and datatype[8:-1]|int >= error_value__STRING|length -%} {{error_value__STRING}} AS {{ column_name }}
                {%- elif datatype.upper().startswith('STRING') -%} {{error_value__STRING}} AS {{ column_name }}
                {% else %} {{error_value_alt__STRING}} AS {{ column_name }}
                {% endif %}
           {% elif datatype in ['NUMBER','INT','FLOAT','DECIMAL'] or datatype.upper().startswith('NUMBER') %}-1 AS {{ column_name }}
           {% elif datatype == 'BOOLEAN' %}CAST('FALSE' AS BOOLEAN) AS {{ column_name }}
           {% else %}NULL AS {{ column_name }}
           {% endif %}
           {%- endif -%}

      {%- endif -%}

      {%- endmacro -%}


      {%- macro datavault4coalesce__hash_algorithm() -%}

           {%- set hash_function = datavault4coalesce.config.hash -%}
           {%- set hash_datatype = datavault4coalesce.config.hash_datatype -%}

           {%- set dict_result = {} -%}
           {%- set hash_alg = '' -%}

           {%- if hash_function == 'MD5' and hash_datatype == 'STRING' -%}
                {%- set hash_alg = 'MD5' -%}
           {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' or hash_function == 'SHA' -%} 
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set hash_alg = 'SHA1' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set hash_alg = 'SHA1_BINARY' -%}       
                {%- endif -%}
           {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' -%}
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set hash_alg = 'SHA2' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set hash_alg = 'SHA2_BINARY' -%}       
                {%- endif -%}   
           {%- endif -%}

           {{ hash_alg }}

      {%- endmacro -%}


      {%- macro datavault4coalesce__unknown_key() -%}
           {%- set hash_function = datavault4coalesce.config.hash -%}
           {%- set hash_datatype = datavault4coalesce.config.hash_datatype -%}

           {%- set dict_result = {} -%}
           {%- set unknown_key = '' -%}

           {%- if hash_function == 'MD5' and hash_datatype == 'STRING' -%}
                {%- set unknown_key = '!00000000000000000000000000000000' -%}
           {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' or hash_function == 'SHA' -%} 
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set unknown_key = '!0000000000000000000000000000000000000000' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set unknown_key = "TO_BINARY('0000000000000000000000000000000000000000')" -%}     
                {%- endif -%}
           {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' -%}
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set unknown_key = '!0000000000000000000000000000000000000000000000000000000000000000' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set unknown_key = "TO_BINARY('0000000000000000000000000000000000000000000000000000000000000000')" -%}  
                {%- endif -%}   
           {%- endif -%}

           {% set unknown_key = datavault4coalesce__as_constant(unknown_key) %}
           {{ unknown_key }}

      {%- endmacro -%}


      {%- macro datavault4coalesce__error_key() -%}
           {%- set hash_function = datavault4coalesce.config.hash -%}
           {%- set hash_datatype = datavault4coalesce.config.hash_datatype -%}

           {%- set dict_result = {} -%}
           {%- set error_key = '' -%}

           {%- if hash_function == 'MD5' and hash_datatype == 'STRING' -%}
                {%- set error_key = '!ffffffffffffffffffffffffffffffff' -%}
           {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' or hash_function == 'SHA' -%} 
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffff' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set error_key = "TO_BINARY('ffffffffffffffffffffffffffffffffffffffff')" -%}        
                {%- endif -%}
           {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' -%}
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set error_key = "TO_BINARY('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')" -%}        
                {%- endif -%}   
           {%- endif -%}

           {% set error_key = datavault4coalesce__as_constant(error_key) %}
           {{ error_key }}

      {%- endmacro -%}
packages:
  COALESCE-DATA_VAULT:
    addedBy: K2XWoywkSJObLCIwZGW4xprzNYo2
    createdAt:
      nanoseconds: 1000000
      seconds: 1661791225
    id: COALESCE-DATA_VAULT
    manifest:
      macros: {}
      stepTypes:
        COALESCE-DATA_VAULT::1:
          id: COALESCE-DATA_VAULT::1
          name: "DV Package: Hub"
        COALESCE-DATA_VAULT::2:
          id: COALESCE-DATA_VAULT::2
          name: "DV Package: Link"
        COALESCE-DATA_VAULT::3:
          id: COALESCE-DATA_VAULT::3
          name: "DV Package: Satellite"
        COALESCE-DATA_VAULT::4:
          id: COALESCE-DATA_VAULT::4
          name: "DV Package: Link Satellite"
        COALESCE-DATA_VAULT::5:
          id: COALESCE-DATA_VAULT::5
          name: "DV Package: Satellite Multi-Active"
        COALESCE-DATA_VAULT::6:
          id: COALESCE-DATA_VAULT::6
          name: "DV Package: Effectivity Satellite"
        COALESCE-DATA_VAULT::7:
          id: COALESCE-DATA_VAULT::7
          name: "DV Package: BV Sat Current View"
    status: added
    version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    versionInfo:
      commit: fcb60873d720b0641e2d837fece6af7043d76ea4
projects: {}
stepTypes:
  StepType-12:
    id: "12"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: PIT'
        short: 'PIT'
        tagColor: '#C0C0C0'
        plural: 'DATAVAULT BY SCALEFREE: PITS'

        config:
        - groupName: Data Vault
          items:
          - displayName: Dimension Key Column
            type: columnSelector
            attributeName: is_dimension_key
            isRequired: true

          - displayName: Clean Up PIT
            type: toggleButton
            attributeName: cleanup_pit
            default: true
      templates:
        create:
          templateString: |-
            {{ stage('Create PIT Table') }}

            {%- set ns = namespace(sdts_datatype = '') %}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
            	{{ stage('Pre-SQL') }}
            	{{ config.preSQL }}
            {% endif %}

            {{ stage('Insert New Rows') }}

            {%- set target_database = storageLocations[0].database -%}
            {%- set target_schema = node.location.name -%}
            {%- set target_node = node.name -%}

            {%- set ns = namespace(sdts_node_name='', hub_node_name='') -%}

            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            WITH records_to_insert AS (
            	SELECT
            	{% for col in sources[0].columns %}

            		{% if 'column' in col.sourceColumns[0].keys() -%}

            			{%- set source_node_name = col.sourceColumns[0].node.name -%}
            			{%- set source_column_name = col.sourceColumns[0].column.name -%}
            			{%- set target_column_name = col.name -%}

            			{%- if col.sourceColumns[0].column.is_Hub_hk -%}
                            {%- set ns.hub_node_name = source_node_name -%}
            				COALESCE("{{ source_node_name }}"."{{ target_column_name }}", {{ datavault4coalesce__unknown_key() }}) AS "{{ target_column_name }}"
            			{%- elif col.sourceColumns[0].column.is_hk -%}
            				COALESCE("{{ source_node_name }}"."{{ source_column_name }}", {{ datavault4coalesce__unknown_key() }}) AS "{{ target_column_name }}"			
            			{%- elif source_column_name == datavault4coalesce.config.ldts_alias -%}
            				COALESCE("{{ source_node_name }}"."{{ source_column_name }}", {{ datavault4coalesce__string_to_timestamp(datavault4coalesce.config.timestamp_format, datavault4coalesce.config.beginning_of_all_times) }}) AS "{{ target_column_name }}"
            			{%- elif col.name == datavault4coalesce.config.sdts_alias -%}
            				"{{ source_node_name }}"."{{ target_column_name }}" AS "{{ target_column_name }}"

                            {%- set ns.sdts_node_name = col.sourceColumns[0].node.name -%}

            			{%- else -%}
            				"{{ source_node_name }}"."{{ source_column_name }}" AS "{{ target_column_name }}"
            			{%- endif %}

            		{%- if not loop.last -%} , {% endif %}
            		{%- elif col.is_dimension_key -%}
            			{{ get_source_transform(col) }} AS "{{ col.name }}",
            		{%- endif %}

                {% endfor %}

            	FROM {{ ref(target_schema, ns.hub_node_name) }} "{{ ns.hub_node_name }}"

            	{% for col in sources[0].columns -%}
            		{%- if col.name == datavault4coalesce.config.sdts_alias -%}

                        {%- set source_node_name = col.sourceColumns[0].node.name -%}
            			{%- set source_node_schema = col.sourceColumns[0].node.location.name -%}

            			JOIN {{ ref(source_node_schema, source_node_name) }} "{{ source_node_name }}"
            			ON "{{ source_node_name }}"."{{ datavault4coalesce.config.snapshot_trigger_column }}" = true
            		{%- endif -%}
            	{% endfor %}

            	{%- for col in sources[0].columns %}
            		
            		{%- if 'column' in col.sourceColumns[0].keys() %}
            			{%- if col.sourceColumns[0].column.is_hk and not loop.first %}

                            {%- set source_node_name = col.sourceColumns[0].node.name -%}
            				{%- set source_node_schema = col.sourceColumns[0].node.location.name -%}
                            {%- set source_column_name = col.sourceColumns[0].column.name -%}
                            {%- set target_node = node.name -%}

            				LEFT JOIN {{ ref(source_node_schema, source_node_name) }} "{{ source_node_name }}"
            				ON "{{ ns.hub_node_name }}"."{{ source_column_name }}" = "{{ source_node_name }}"."{{ source_column_name }}"
            				
                            {% for sdts_col in sources[0].columns %}

            					{%- if sdts_col.name == datavault4coalesce.config.sdts_alias -%}
            						AND "{{ ns.sdts_node_name }}"."{{ sdts_col.name}}" BETWEEN "{{ source_node_name }}"."{{ datavault4coalesce.config.ldts_alias }}" and "{{ source_node_name }}"."{{ datavault4coalesce.config.ledts_alias }}"
            					{%- endif -%}
            				{%- endfor -%}
            			
            			{% endif %}
            		{%- endif %}
            	{% endfor -%}
            )

            SELECT * FROM records_to_insert
            WHERE "{{ get_value_by_column_attribute('is_dimension_key') }}" NOT IN 
            (
            	SELECT "{{ get_value_by_column_attribute('is_dimension_key') }}" FROM 
            	{{ ref_no_link(node.location.name, node.name) }}
            )


            {% if config.cleanup_pit %}

            {{ stage('Clean up PIT') }}

            	DELETE FROM {{ ref_no_link(node.location.name, node.name) }}
            	WHERE "{{ datavault4coalesce.config.sdts_alias }}" NOT IN (
            		SELECT "{{ datavault4coalesce.config.sdts_alias }}" FROM 
            			{% for col in sources[0].columns %}
            				{%- if col.name == datavault4coalesce.config.sdts_alias -%}
                            	{%- set source_node_name = col.sourceColumns[0].node.name -%}
            					"{{ target_database }}"."{{ target_schema }}"."{{ source_node_name }}"
            				{%- endif -%}
            			{%- endfor %}
            		WHERE "{{ datavault4coalesce.config.snapshot_trigger_column }}" = true
            		)
            {% endif %}

            {% if config.postSQL %}
            	{{ stage('Post-SQL') }}
            	{{ config.postSQL }}
            {% endif %}
    name: "Datavault by Scalefree: PIT"
    version: 1
  StepType-13:
    id: "13"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: SNAPSHOT V0'
        short: 'Snapshot_v0'
        plural: 'DATAVAULT BY SCALEFREE: SNAPSHOTS V0'
        tagColor: '#1E8449'

        config:
        - groupName: Data Vault
          items:
          - displayName: Snapshot Start Date (yyyy-mm-dd)
            type: textBox
            attributeName: input_snapshot_start_date
            isRequired: true
            default: "2020-01-01"

          - displayName: Snapshot End Date (yyyy-mm-dd)
            type: textBox
            attributeName: input_snapshot_end_date
            isRequired: true
            default: "2025-12-31"

          - displayName: Daily Snapshot Time (hh:mm:ss)
            type: textBox
            attributeName: input_daily_snapshot_time
            isRequired: true
            default: "07:00:00"

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false


        systemColumns:
        - displayName: "SDTS"
          transform: ""
          dataType: TIMESTAMP
          placement: end
          attributeName: system_sdts

        - displayName: "FORCE_ACTIVE"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_force_active

        - displayName: "REPLACEMENT_SDTS"
          transform: ""
          dataType: TIMESTAMP
          placement: end
          attributeName: system_replacement_sdts

        - displayName: "CAPTION"
          transform: ""
          dataType: STRING
          placement: end
          attributeName: system_caption

        - displayName: "IS_HOURLY"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_hourly

        - displayName: "IS_DAILY"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_daily

        - displayName: "IS_BEGINNING_OF_WEEK"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_beginning_of_week

        - displayName: "IS_BEGINNING_OF_MONTH"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_beginning_of_month

        - displayName: "IS_BEGINNING_OF_QUARTER"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_beginning_of_quarter

        - displayName: "IS_BEGINNING_OF_YEAR"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_beginning_of_year
      templates:
        create:
          templateString: |-
            {{ stage('Create Snapshot v0 Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {{ stage('Insert New Rows') }}

            {%- set timestamp_format = datavault4coalesce.config.timestamp_format -%}
            {%- set start_date = config.input_snapshot_start_date -%}
            {%- set end_date = config.input_snapshot_end_date -%}
            {%- set daily_snapshot_time = config.input_daily_snapshot_time -%}

            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}

            WITH "date_base" AS (
                SELECT
                    "sdts" as "{{ datavault4coalesce.config.sdts_alias }}",
                    TRUE as "force_active",
                    "sdts" AS "replacement_sdts",
                    CONCAT('Snapshot ', DATE("sdts")) AS "caption",
                    CASE
                        WHEN EXTRACT(MINUTE FROM "sdts") = 0 AND EXTRACT(SECOND FROM "sdts") = 0 THEN TRUE
                        ELSE FALSE
                    END AS "is_hourly",
                    CASE
                        WHEN EXTRACT(HOUR FROM "sdts") = 0 AND EXTRACT(MINUTE FROM "sdts") = 0 AND EXTRACT(SECOND FROM "sdts") = 0 THEN TRUE
                        ELSE FALSE
                    END AS "is_daily",
                    CASE
                        WHEN EXTRACT(DAYOFWEEK FROM  "sdts") = 1 THEN TRUE
                        ELSE FALSE
                    END AS "is_beginning_of_week",
                    CASE
                        WHEN EXTRACT(DAY FROM "sdts") = 1 THEN TRUE
                        ELSE FALSE
                    END AS "is_beginning_of_month",
                    CASE
                        WHEN EXTRACT(DAY FROM "sdts") = 1 AND EXTRACT(MONTH FROM "sdts") in (1, 4, 7, 10) THEN TRUE
                        ELSE FALSE
                    END AS "is_beginning_of_quarter",  
                    CASE
                        WHEN EXTRACT(DAY FROM "sdts") = 1 AND EXTRACT(MONTH FROM "sdts") = 1 THEN TRUE
                        ELSE FALSE
                    END AS "is_beginning_of_year"
                FROM 
                (
                    SELECT
                        DATEADD(DAY, SEQ4(), 
                        TIMESTAMPADD(SECOND, EXTRACT(SECOND FROM TO_TIME('{{ daily_snapshot_time }}')), 
                        TIMESTAMPADD(MINUTE, EXTRACT(MINUTE FROM TO_TIME('{{ daily_snapshot_time }}')), 
                        TIMESTAMPADD(HOUR, EXTRACT(HOUR FROM TO_TIME('{{ daily_snapshot_time }}')), TO_DATE('{{ start_date }}', 'YYYY-MM-DD')))
                        ))::TIMESTAMP AS "sdts"
                    FROM 
                        TABLE(GENERATOR(ROWCOUNT => 100000))
                    WHERE 
                        "sdts" <= TO_DATE('{{ end_date }}', 'YYYY-MM-DD')
                ) 
            ),

            "records_to_insert" AS (

                SELECT 
                    "date_base".*
                FROM "date_base"
                LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "tgt"
                    ON "date_base"."{{ datavault4coalesce.config.sdts_alias }}" = "tgt"."{{ datavault4coalesce.config.sdts_alias }}"
                WHERE "tgt"."{{ datavault4coalesce.config.sdts_alias }}" IS NULL

            )

            SELECT * FROM "records_to_insert"

            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
    name: "Datavault by Scalefree: Snapshot v0"
    version: 1
  StepType-14:
    id: "14"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: SNAPSHOT V1'
        short: 'Snapshot_v1'
        plural: 'DATAVAULT BY SCALEFREE: SNAPSHOTS V1'
        tagColor: '#58D68D'

        config:

        - groupName: Use Logarithmic Logic
          items:
          - displayName: Use Logarithmic Logic
            type: toggleButton
            attributeName: use_logarithmic_logic
            enableIf: 'true'
            isRequired: true
            default: true

        - groupName: Daily Snapshot Logic
          enableIf: "{{ config.use_logarithmic_logic }}"
          items:
          - displayName: Keep Daily Snapshots forever
            type: toggleButton
            attributeName: daily_snapshots_forever
            enableIf: "{{ config.use_logarithmic_logic }}"
            isRequired: true
            default: false

          - displayName: Duration
            type: textBox
            attributeName: daily_snapshot_duration
            enableIf: "{% if not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: "30"

          - displayName: Time Unit
            type: dropdownSelector
            attributeName: daily_snapshot_unit
            enableIf: "{% if not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: DAY
            options:
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR
            
        - groupName: Weekly Snapshot Logic
          enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
          items:
          - displayName: Keep Weekly Snapshots forever
            type: toggleButton
            attributeName: weekly_snapshots_forever
            enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: false

          - displayName: Duration
            type: textBox
            attributeName: weekly_snapshot_duration
            enableIf: "{% if not config.weekly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: "1"

          - displayName: Time Unit
            type: dropdownSelector
            attributeName: weekly_snapshot_unit
            enableIf: "{% if not config.weekly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}" 
            isRequired: true
            default: "YEAR"
            options:
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR   

        - groupName: Monthly Snapshot Logic
          enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
          items:
          - displayName: Keep Monthly Snapshots forever
            type: toggleButton
            attributeName: monthly_snapshots_forever
            enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: false

          - displayName: Duration
            type: textBox
            attributeName: monthly_snapshot_duration
            enableIf: "{% if not config.monthly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: "3"

          - displayName: Time Unit
            type: dropdownSelector
            attributeName: monthly_snapshot_unit
            enableIf: "{% if not config.monthly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: YEAR
            options:
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR

        - groupName: Quarterly Snapshot Logic
          enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever and not config.monthly_snapshots_forever %} true {% else %} false {% endif %}"
          items:
          - displayName: Keep Quarterly Snapshots forever
            type: toggleButton
            attributeName: quarterly_snapshots_forever
            enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever and not config.monthly_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: false

          - displayName: Duration
            type: textBox
            attributeName: quarterly_snapshot_duration
            enableIf: "{% if not config.quarterly_snapshots_forever and not config.daily_snapshots_forever and not config.monthly_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: "5"

          - displayName: Time Unit
            type: dropdownSelector
            attributeName: quarterly_snapshot_unit
            enableIf: "{% if not config.quarterly_snapshots_forever and not config.daily_snapshots_forever and not config.monthly_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: YEAR
            options:
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR
            
        - groupName: Yearly Snapshot Logic
          enableIf: "{% if config.use_logarithmic_logic and not config.quarterly_snapshots_forever and not config.monthly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
          items:
          - displayName: Keep Yearly Snapshots forever
            type: toggleButton
            attributeName: yearly_snapshots_forever
            enableIf: "{% if config.use_logarithmic_logic and not config.quarterly_snapshots_forever and not config.monthly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: false

          - displayName: Duration
            type: textBox
            attributeName: yearly_snapshot_duration
            enableIf: "{% if not config.yearly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: "10"

          - displayName: Time Unit
            type: dropdownSelector
            attributeName: yearly_snapshot_unit
            enableIf: "{% if not config.yearly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}" 
            isRequired: true
            default: YEAR
            options:
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR  

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false


        systemColumns:
        - displayName: IS_ACTIVE
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_active

        - displayName: IS_LATEST
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_latest

        - displayName: IS_CURRENT_YEAR
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_current_year

        - displayName: IS_LAST_YEAR
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_last_year

        - displayName: IS_ROLLING_YEAR
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_rolling_year

        - displayName: IS_LAST_ROLLING_YEAR
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_last_rolling_year
      templates:
        create:
          templateString: |-
            {{ stage('Create Snapshot v1 View') }}

            {% if config.use_logarithmic_logic %}
                {%-set log_logic = {
                'daily':        {'duration': config.daily_snapshot_duration|int,
                                'unit': '{{config.daily_snapshot_unit}}',
                                'forever': '{{config.daily_snapshots_forever}}'},
                'weekly':       {'duration': config.weekly_snapshot_duration|int,
                                'unit': '{{config.weekly_snapshot_unit}}',
                                'forever': '{{config.weekly_snapshots_forever}}'},
                'monthly':      {'duration': config.monthly_snapshot_duration|int,
                                'unit': '{{config.monthly_snapshot_unit}}',
                                'forever': '{{config.monthly_snapshots_forever}}'},
                'quarterly':    {'duration': config.quarterly_snapshot_duration|int,
                                'unit': '{{config.quarterly_snapshot_unit}}',
                                'forever': '{{config.quarterly_snapshots_forever}}'},
                'yearly':       {'duration': config.yearly_snapshot_duration|int,
                                'unit': '{{config.yearly_snapshot_unit}}',
                                'forever': '{{config.yearly_snapshots_forever}}'},
                    } 
                %}
            {% else %}
                {% set log_logic = none %}
            {% endif %}

            {% set sdts_alias = datavault4coalesce.config.sdts_alias %}
            {% set ns = namespace(forever_status=FALSE) %}
            {% set snapshot_trigger_column = 'IS_ACTIVE' %}


            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
            		"{{ col.name }}"
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            AS
            WITH latest_row AS (

                SELECT
                    "{{ sdts_alias }}"
                FROM {{ ref(sources[0].columns[0].sourceColumns[0].node.location.name, sources[0].columns[0].sourceColumns[0].node.name) }}
                WHERE "{{ sdts_alias }}" <= SYSDATE()
                ORDER BY "{{ sdts_alias }}" DESC
                LIMIT 1

            ), 

            virtual_logic AS (
                
                SELECT
                    c."{{ sdts_alias }}",
                    c."REPLACEMENT_SDTS",
                    c."FORCE_ACTIVE",
                    {%- if log_logic is none %}
                    TRUE AS {{ snapshot_trigger_column }},
                    {%- else %}
                    CASE 
                        WHEN
                        {% if 'daily' in log_logic.keys() %}
                            {%- if log_logic['daily']['forever'] is true -%}
                                {%- set ns.forever_status = 'TRUE' -%}
                              (1=1)
                            {%- else %}
                                {%- set daily_duration = log_logic['daily']['duration'] -%}
                                {%- set daily_unit = log_logic['daily']['unit'] -%}
                              (DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN SYSDATE() - INTERVAL '{{ daily_duration }} {{ daily_unit }}' AND SYSDATE())
                            {%- endif -%}   
                        {%- endif %}

                        {%- if 'weekly' in log_logic.keys() %} OR 
                            {%- if log_logic['weekly']['forever'] is true -%}
                                {%- set ns.forever_status = 'TRUE' -%}
                          (c."IS_BEGINNING_OF_WEEK" = TRUE)
                            {%- else %} 
                                {%- set weekly_duration = log_logic['weekly']['duration'] -%}
                                {%- set weekly_unit = log_logic['weekly']['unit'] %}            
                          ((DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN SYSDATE() - INTERVAL '{{ weekly_duration }} {{ weekly_unit }}' AND SYSDATE()) AND (c."IS_BEGINNING_OF_WEEK" = TRUE))
                            {%- endif -%}
                        {% endif -%}

                        {%- if 'monthly' in log_logic.keys() %} OR
                            {%- if log_logic['monthly']['forever'] is true -%}
                                {%- set ns.forever_status = 'TRUE' %}
                          (c."IS_BEGINNING_OF_MONTH" = TRUE)
                            {%- else %}
                                {%- set monthly_duration = log_logic['monthly']['duration'] -%}
                                {%- set monthly_unit = log_logic['monthly']['unit'] %}            
                          ((DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN SYSDATE() - INTERVAL '{{ monthly_duration }} {{ monthly_unit }}' AND SYSDATE()) AND (c."IS_BEGINNING_OF_MONTH" = TRUE))
                            {%- endif -%}
                        {% endif -%}

                        {%- if 'quarterly' in log_logic.keys() %} OR
                            {%- if log_logic['quarterly']['forever'] is true -%}
                                {%- set ns.forever_status = 'TRUE' %}
                          (c."IS_BEGINNING_OF_QUARTER" = TRUE)
                            {%- else %}
                                {%- set quarterly_duration = log_logic['quarterly']['duration'] -%}
                                {%- set quarterly_unit = log_logic['quarterly']['unit'] %}            
                          ((DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN SYSDATE() - INTERVAL '{{ quarterly_duration }} {{ quarterly_unit }}' AND SYSDATE()) AND (c."IS_BEGINNING_OF_QUARTER" = TRUE))
                            {%- endif -%}
                        {% endif -%}

                        {%- if 'yearly' in log_logic.keys() %} OR 
                            {%- if log_logic['yearly']['forever'] is true -%}
                                {%- set ns.forever_status = 'TRUE' %}
                          (c."IS_BEGINNING_OF_YEAR" = TRUE)
                            {%- else %}
                                {%- set yearly_duration = log_logic['yearly']['duration'] -%}
                                {%- set yearly_unit = log_logic['yearly']['unit'] %}                    
                          ((DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN SYSDATE() - INTERVAL '{{ yearly_duration }} {{ yearly_unit }}' AND SYSDATE()) AND (c."IS_BEGINNING_OF_YEAR" = TRUE))
                            {%- endif -%}
                        {% endif %}
                        THEN TRUE
                        ELSE FALSE
                    END AS {{ snapshot_trigger_column }},
                    {%- endif %}

                    CASE
                        WHEN l."{{ sdts_alias }}" IS NULL THEN FALSE
                        ELSE TRUE
                    END AS "IS_LATEST",

                    c."CAPTION",
                    c."IS_HOURLY",
                    c."IS_DAILY",
                    c."IS_BEGINNING_OF_WEEK",
                    c."IS_BEGINNING_OF_MONTH",
                    c."IS_BEGINNING_OF_QUARTER",
                    c."IS_BEGINNING_OF_YEAR",
                    CASE
                        WHEN EXTRACT(YEAR FROM c."{{ sdts_alias }}") = EXTRACT(YEAR FROM SYSDATE()) THEN TRUE
                        ELSE FALSE
                    END AS "IS_CURRENT_YEAR",
                    CASE
                        WHEN EXTRACT(YEAR FROM c."{{ sdts_alias }}") = EXTRACT(YEAR FROM SYSDATE())-1 THEN TRUE
                        ELSE FALSE
                    END AS "IS_LAST_YEAR",
                    CASE
                        WHEN DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN (SYSDATE() - INTERVAL '1 YEAR') AND SYSDATE() THEN TRUE
                        ELSE FALSE
                    END AS "IS_ROLLING_YEAR",
                    CASE
                        WHEN DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN (SYSDATE() - INTERVAL '2 YEAR') AND (SYSDATE() - INTERVAL '1 YEAR') THEN TRUE
                        ELSE FALSE
                    END AS "IS_LAST_ROLLING_YEAR"
                FROM {{ ref(sources[0].columns[0].sourceColumns[0].node.location.name, sources[0].columns[0].sourceColumns[0].node.name) }} c
                LEFT JOIN latest_row l
                ON c."{{ sdts_alias }}" = l."{{ sdts_alias }}"
                WHERE c."{{ sdts_alias }}" < SYSDATE()
            ),

            active_logic_combined AS (

                SELECT 
                    "{{ sdts_alias }}",
                    "FORCE_ACTIVE",
                    "REPLACEMENT_SDTS",
                    "CAPTION",
                    "IS_HOURLY",
                    "IS_DAILY",
                    "IS_BEGINNING_OF_WEEK",
                    "IS_BEGINNING_OF_MONTH",
                    "IS_BEGINNING_OF_QUARTER",
                    "IS_BEGINNING_OF_YEAR",
                    CASE
                        WHEN "FORCE_ACTIVE" AND {{ snapshot_trigger_column }} THEN TRUE
                        WHEN NOT "FORCE_ACTIVE" OR NOT {{ snapshot_trigger_column }} THEN FALSE
                    END AS "{{ snapshot_trigger_column }}",
                    "IS_LATEST",         
                    "IS_CURRENT_YEAR",
                    "IS_LAST_YEAR",
                    "IS_ROLLING_YEAR",
                    "IS_LAST_ROLLING_YEAR"
                FROM virtual_logic
                ORDER BY "{{ sdts_alias }}" DESC
            )

            SELECT * FROM active_logic_combined
        run:
          templateString: ""
    name: "Datavault by Scalefree: Snapshot v1"
    version: 1
  StepType-15:
    id: "15"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Copy of Stage
    version: 1
  StepType-4:
    id: "4"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: STAGE'
        short: DV_STG
        plural: 'DATAVAULT BY SCALEFREE: STAGES'
        tagColor: '#AED6F1'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: view
            options:
            - view
            isRequired: true
            enableIf: "false"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true

        - groupName: Data Vault
          items:
          - displayName: Generate Ghost Records
            attributeName: generate_ghost_records
            type: toggleButton
            default: true

        systemColumns:
        - displayName: "LDTS"
          transform: SYSDATE()
          dataType: TIMESTAMP
          placement: end
          attributeName: is_system_ldts    
          description: "The Load Date Timestamp (LDTS) describes when this data first arrived in the Data Warehouse."
        - displayName: "RSRC"
          transform: "{{record_source()}}"
          dataType: STRING
          placement: end
          attributeName: is_system_rsrc    
          description: "The Record Source (RSRC) describes the source of this data."  
      templates:
        create:
          templateString: |-
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}

            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        {%- if col.is_rsrc_column -%}
                            "{{datavault4coalesce.config.rsrc_alias}}"
                        {%- elif col.is_ldts_column -%}
                            "{{datavault4coalesce.config.ldts_alias}}"
                        {% else %}
                            "{{ col.name }}"
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}

                    {%- if config.generate_ghost_records -%}

                        UNION ALL 

                        SELECT

                        {% for source in sources %}
                            {% for col in source.columns %}
                                {%- if "hashDetails" in col.keys() %}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'unknown', hash=true) }}
                                {%- else -%}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'unknown', hash=false) }}
                                {%- endif -%}
                            {% if not loop.last %},{% endif %}
                            {% endfor %}
                        {% endfor %}

                        UNION ALL 

                        SELECT

                        {% for source in sources %}
                            {% for col in source.columns %}
                                {%- if "hashDetails" in col.keys() %}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'error', hash=true) }}
                                {%- else -%}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'error', hash=false) }}
                                {%- endif -%}
                            {% if not loop.last %},{% endif %}
                            {% endfor %}
                        {% endfor %}

                    {%- endif -%}

                {% endfor %}

            {% endif %}
        run:
          templateString: ""
    name: "Datavault by Scalefree: Stage"
    version: 1
  StepType-6:
    id: "6"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: HUB'
        short: 'HUB'
        tagColor: blue
        plural: 'DATAVAULT BY SCALEFREE: HUBS'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'true'
            options: 
            - table
            default: table
         
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

          - type: multisourceToggle

        - groupName: Data Vault
          items:

          - displayName: Hub Hashkey Column
            type: columnSelector
            attributeName: is_Hub_hk
            isRequired: true

          - displayName: Hub LoadDateTimestamp Column
            enableIf: 'false'
            type: columnSelector
            attributeName: is_Hub_ldts
            isRequired: false
      templates:
        create:
          templateString: |
            {{ stage('Create Hub Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
            	{{ stage('Pre-SQL') }}
            	{{ config.preSQL }}
            {% endif %}

            {% for source in sources %}

            	{{ stage('INSERT INTO Hub - ' ~ source.name) }}

            	INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            	
            WITH incoming AS (

            	SELECT DISTINCT
            	{% for col in source.columns %}
            		{{ get_source_transform(col) }} AS "{{ col.name }}"
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}

            	{{ source.join }}

            ), 

            new_records AS (

            	SELECT "SRC".* 
            	FROM incoming "SRC"
            	WHERE NOT EXISTS 

            	(SELECT 1 
            	FROM {{ ref_no_link(node.location.name, node.name) }} "TGT"
            	WHERE 
            	{% for col in sources[0].columns if (col.is_Hub_hk) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %} )
            )


            	SELECT * FROM new_records

            {% endfor %}

            {% if config.postSQL %}
            	{{ stage('Post-SQL') }}
            	{{ config.postSQL }}
            {% endif %}
    name: "Datavault by Scalefree: Hub"
    version: 1
  StepType-7:
    id: "7"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: LINK'
        short: 'LINK'
        tagColor: 'Red'
        plural: 'DATAVAULT BY SCALEFREE: LINKS'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            default: table
            options:
            - table

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false
            
          - type: multisourceToggle
          
        - groupName: Data Vault
          items:
          - displayName: Link Hashkey Column
            type: columnSelector
            attributeName: is_Link_hk
            isRequired: true 
      templates:
        create:
          templateString: |-
            {{ stage('Create Link Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
                {{ stage('Pre-SQL') }}
                {{ config.preSQL }}

            {% endif %}

            {% for source in sources %}
                        
                {{ stage('Merge Link - ' ~ source.name) }}
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}

            WITH incoming AS 
                (
                    SELECT DISTINCT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}
                ),

            new_records AS (
                SELECT
                    "SRC".*
                FROM incoming "SRC"
                WHERE NOT EXISTS (
                    SELECT
                        1
                    FROM {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    WHERE
                {% for col in sources[0].columns if (col.is_Link_hk) -%}
                    {% if not loop.first %}
                        AND
                    {% endif %}
                    "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                {% endfor %}        
                )
            )

            SELECT * FROM new_records

            {% endfor %}

            {% if config.postSQL %}
                {{ stage('Post-SQL') }}
                {{ config.postSQL }}    
            {% endif %}
    name: "Datavault by Scalefree: Link"
    version: 1
  StepType-8:
    id: "8"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: SATELLITE V0'
        short: 'SAT_v0'
        plural: 'DATAVAULT BY SCALEFREE: SATELLITES V0'
        tagColor: 'Yellow'

        config:
        - groupName: Data Vault
          items:
          - displayName: Hashkey Column
            type: columnSelector
            attributeName: is_hk
            isRequired: true

          - displayName: Hashdiff Column
            type: columnSelector
            attributeName: is_hd
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false
      templates:
        create:
          templateString: |
            {{ stage('Create Satellite Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
            	{{ stage('Pre-SQL') }}
            	{{ config.preSQL }}
            {% endif %}

            {{ stage('Insert New Rows') }}
            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            WITH latest_entries_in_sat AS (
            	/* get current rows from satellite */
            	{% for col in columns if col.is_hk or col.is_hd %}
            		{%- if loop.first -%}SELECT {% endif %} 
            		"{{col.name}}"
            		{%- if not loop.last -%}, {% endif %}
            		{%- if loop.last %} 
            			FROM {{ ref_no_link(node.location.name, node.name) }} 
            			QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("is_hk") }}" ORDER BY "{{ datavault4coalesce.config.ldts_alias }}" DESC) = 1
            		{% endif %}
            	{% endfor %}
            ),

            deduplicated_numbered_source AS (
                
                {% for source in sources %}

                    SELECT
            		{% for col in source.columns %}
            			{{ get_source_transform(col) }} AS {{ col.name }},
            		{% endfor %}
                    ROW_NUMBER() OVER(PARTITION BY "{{ get_value_by_column_attribute("is_hk") }}" ORDER BY "{{ datavault4coalesce.config.ldts_alias }}") as rn
                    
                    {{ source.join }}
                    QUALIFY
                    CASE
                        WHEN "{{ get_value_by_column_attribute("is_hd") }}" = LAG("{{ get_value_by_column_attribute("is_hd") }}") OVER(PARTITION BY "{{ get_value_by_column_attribute("is_hk") }}" ORDER BY "{{ datavault4coalesce.config.ldts_alias }}" ) THEN FALSE
                        ELSE TRUE
                    END

                {% endfor %}

            )

            	{% for source in sources %}
            		SELECT DISTINCT
            		{% for col in source.columns %}
            			{{ col.name }}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		FROM deduplicated_numbered_source
            	WHERE NOT EXISTS (
            		SELECT 1 FROM latest_entries_in_sat
            		WHERE 
            		{% for col in source.columns if col.is_hk or col.is_hd %}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			deduplicated_numbered_source.{{ col.name }} = latest_entries_in_sat."{{ col.name }}"
            		{% endfor %}
                    AND deduplicated_numbered_source.rn = 1
            	)

            	{% endfor %}

            {% if config.postSQL %}
            	{{ stage('Post-SQL') }}
            	{{ config.postSQL }}
            {% endif %}
    name: "Datavault by Scalefree: Satellite v0"
    version: 1
  StepType-9:
    id: "9"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: SATELLITE V1'
        short: 'SAT_v1'
        plural: 'DATAVAULT BY SCALEFREE: SATELLITES V1'
        tagColor: '#FFAC1C'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'true'
            default: view
            options:
            - view

        - groupName: Data Vault
          items:
          - displayName: Hashkey Column
            type: columnSelector
            attributeName: is_hk
            isRequired: false

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LEDTS"
          transform: |-
            COALESCE(LEAD("{{ datavault4coalesce.config.ldts_alias }}" - INTERVAL '1 MICROSECOND') 
            OVER (PARTITION BY "{{ get_value_by_column_attribute("is_hk") }}" 
            ORDER BY "{{ datavault4coalesce.config.ldts_alias }}"), {{ datavault4coalesce__string_to_timestamp(datavault4coalesce.config.timestamp_format, datavault4coalesce.config.end_of_all_times) }})
          dataType: TIMESTAMP
          placement: end
          attributeName: is_system_ledts
        - displayName: "IS_CURRENT"
          transform: |-
            CASE 
              WHEN 
                LEAD("{{ datavault4coalesce.config.ldts_alias }}" - INTERVAL '1 MICROSECOND') 
                OVER (PARTITION BY "{{ get_value_by_column_attribute("is_hk") }}" 
                ORDER BY "{{ datavault4coalesce.config.ldts_alias }}") IS NULL 
              THEN TRUE 
              ELSE FALSE 
            END
          dataType: BOOLEAN
          placement: end
          attributeName: is_system_current_col
      templates:
        create:
          templateString: |-
            {{ stage('Create Satellite View') }}

            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                   "{{ col.name }}"
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            AS
            {% for source in sources %}
                SELECT
                {% for col in source.columns %}
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                {{ source.join }}
            {% endfor %}
        run:
          templateString: ""
    name: "Datavault by Scalefree: Satellite v1"
    version: 1
  StepType-COALESCE-DATA_VAULT::1:
    id: COALESCE-DATA_VAULT::1
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: HUB
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            options: 
            - table
            default: table

          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: true

          - type: multisourceToggle
          
        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {{ stage('Create Hub Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
            	{{ stage('Pre-SQL') }}
            	{{ config.preSQL }}
            {% endif %}

            {% for source in sources %}

            	{{ stage('Merge Hub - ' ~ source.name) }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		SELECT DISTINCT
            		{% for col in source.columns %}
            			{{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.is_Hub_hk) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)

            {% endfor %}

            {% if config.postSQL %}
            	{{ stage('Post-SQL') }}
            	{{ config.postSQL }}
            {% endif %}
    name: "DV Package: Hub"
    packageInfo:
      id: COALESCE-DATA_VAULT
      version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    version: 1
  StepType-COALESCE-DATA_VAULT::2:
    id: COALESCE-DATA_VAULT::2
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: LINK
        short: 'LNK'
        plural: 'Links'
        tagColor: 'red'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            default: table
            options:
            - table

          - displayName: Insert Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true

          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {{ stage('Create Link Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
                {{ stage('Pre-SQL') }}
                {{ config.preSQL }}

            {% endif %}

            {% for source in sources %}
                        
                {{ stage('Merge Link - ' ~ source.name) }}
                MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
                (
                    SELECT DISTINCT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {{ config.insertStrategy }}
                    {% endif %}
                )
                AS "SRC"
                ON
                {% for col in sources[0].columns if (col.isLinkHash) -%}
                    {% if not loop.first %}
                        AND
                    {% endif %}
                    "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                {% endfor %}
                WHEN NOT MATCHED THEN
                INSERT
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                ) VALUES
                (
                    {% for col in columns %}
                        "SRC"."{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )

            {% endfor %}

            {% if config.postSQL %}
                {{ stage('Post-SQL') }}
                {{ config.postSQL }}    
            {% endif %}
    name: "DV Package: Link"
    packageInfo:
      id: COALESCE-DATA_VAULT
      version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    version: 1
  StepType-COALESCE-DATA_VAULT::3:
    id: COALESCE-DATA_VAULT::3
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: SATELLITE
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            default: table
            options:
            - table

          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: true

          - displayName: Change Hash Column
            type: columnSelector
            attributeName: isChangeHash
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |
            {{ stage('Create Satellite Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
            	{{ stage('Pre-SQL') }}
            	{{ config.preSQL }}
            {% endif %}

            {{ stage('Insert New Rows') }}
            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            WITH "SAT_CURR_ROWS" AS (
            	/* get current rows from satellite */
            	{% for col in columns if col.isHubHash or col.isChangeHash %}
            		{%- if loop.first -%}SELECT {% endif %} 
            		"{{col.name}}"
            		{%- if not loop.last -%}, {% endif %}
            		{%- if loop.last %} 
            			FROM {{ ref_no_link(node.location.name, node.name) }} 
            			QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isHubHash") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
            		{% endif %}
            	{% endfor %}
            )

            	{% for source in sources %}
            		SELECT DISTINCT
            		{% for col in source.columns %}
            			{{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}
            	WHERE NOT EXISTS(
            		SELECT 1 FROM "SAT_CURR_ROWS"
            		WHERE 
            		{% for col in source.columns if col.isHubHash or col.isChangeHash %}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			{{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
            		{% endfor %}
            	)

            	{% endfor %}

            {% if config.postSQL %}
            	{{ stage('Post-SQL') }}
            	{{ config.postSQL }}
            {% endif %}
    name: "DV Package: Satellite"
    packageInfo:
      id: COALESCE-DATA_VAULT
      version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    version: 1
  StepType-COALESCE-DATA_VAULT::4:
    id: COALESCE-DATA_VAULT::4
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: LINK SATELLITE
        short: 'LSAT'
        plural: 'Link Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            default: table
            options:
            - table

          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: true

          - displayName: Change Hash Column
            type: columnSelector
            attributeName: isChangeHash
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {{ stage('Create Link Satellite Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
                {{ stage('Pre-SQL') }}
                {{ config.preSQL }}
            {% endif %}

            {{ stage('Insert New Rows') }}
            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            WITH "SAT_CURR_ROWS" AS (
                /* get current rows from satellite */
                {% for col in columns if col.isLinkHash or col.isChangeHash %}
                    {%- if loop.first -%}SELECT {% endif %} 
                    "{{col.name}}"
                    {%- if not loop.last -%}, {% endif %}
                    {%- if loop.last %} 
                        FROM {{ ref_no_link(node.location.name, node.name) }} 
                        QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isLinkHash") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
                    {% endif %}
                {% endfor %}
            )

                {% for source in sources %}
                    SELECT DISTINCT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}
                WHERE NOT EXISTS(
                    SELECT 1 FROM "SAT_CURR_ROWS"
                    WHERE 
                    {% for col in source.columns if col.isLinkHash or col.isChangeHash %}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        {{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
                    {% endfor %}
                )

                {% endfor %}

            {% if config.postSQL %}
                {{ stage('Post-SQL') }}
                {{ config.postSQL }}
            {% endif %}
    name: "DV Package: Link Satellite"
    packageInfo:
      id: COALESCE-DATA_VAULT
      version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    version: 1
  StepType-COALESCE-DATA_VAULT::5:
    id: COALESCE-DATA_VAULT::5
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: SATELLITE MULTI-ACTIVE
        short: 'SAT_MA'
        plural: 'Satellites Multi-Active'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            default: table
            options:
            - table

          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: false

          - displayName: Change Hash Column
            type: columnSelector
            attributeName: isChangeHash
            isRequired: false

          - displayName: Multi-Active Column
            type: columnSelector
            attributeName: isMAAttrib
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false
      templates:
        create:
          templateString: |-
            {{ stage('Create Satellite Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            {% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
            	{{ stage('Pre-SQL') }}
            	{{ config.preSQL }}
            {% endif %}

            {{ stage('Insert New Rows') }}
            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            WITH "SAT_CURR_ROWS" AS (
            	/* get current rows from satellite */
            	{% for col in columns if col.isHubHash or col.isChangeHash or col.isMAAttrib %}
            		{%- if loop.first -%}SELECT {% endif %} 
            		{{col.name}}
            		{%- if not loop.last -%}, {% endif %}
            		{%- if loop.last %} 
            			FROM {{ ref_no_link(node.location.name, node.name) }} 
            			QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isHubHash") }}","{{ get_value_by_column_attribute("isMAAttrib") }}" ORDER BY LOAD_DATE DESC) = 1
            		{% endif %}
            	{% endfor %}
            )

            	{% for source in sources %}
            		SELECT DISTINCT
            		{% for col in source.columns %}
            			{{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}
            	WHERE NOT EXISTS(
            		SELECT 1 FROM "SAT_CURR_ROWS"
            		WHERE 
            		{% for col in source.columns if col.isHubHash or col.isChangeHash or col.isMAAttrib %}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			{{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
            		{% endfor %}
            	)

            	{% endfor %}

            {% if config.postSQL %}
            	{{ stage('Post-SQL') }}
            	{{ config.postSQL }}
            {% endif %}
    name: "DV Package: Satellite Multi-Active"
    packageInfo:
      id: COALESCE-DATA_VAULT
      version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    version: 1
  StepType-COALESCE-DATA_VAULT::6:
    id: COALESCE-DATA_VAULT::6
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Effectivity Satellite
        short: 'SAT_EFF'
        plural: 'Effectivity Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            default: table
            options:
            - table

          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: false

          - displayName: Driving Key Column
            type: columnSelector
            attributeName: isDrivingKey
            isRequired: false


        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {{ stage('Create Effectivity Satellite Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
                {{ stage('Pre-SQL') }}
                {{ config.preSQL }}
            {% endif %}

            {{ stage('Insert New Rows') }}
            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            WITH "SAT_CURR_ROWS" AS (
                /* get current rows from satellite */
                {% for col in columns if col.isDrivingKey or col.isLinkHash %}
                    {%- if loop.first -%}SELECT {% endif %} 
                    {{col.name}}
                    {%- if not loop.last -%}, {% endif %}
                    {%- if loop.last %} 
                        FROM {{ ref_no_link(node.location.name, node.name) }} 
                        QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isDrivingKey") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
                    {% endif %}
                {% endfor %}
            )

                {% for source in sources %}
                    SELECT DISTINCT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}
                WHERE NOT EXISTS(
                    SELECT 1 FROM "SAT_CURR_ROWS"
                    WHERE 
                    {% for col in source.columns if col.isDrivingKey or col.isLinkHash %}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        {{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
                    {% endfor %}
                )

                {% endfor %}

            {% if config.postSQL %}
                {{ stage('Post-SQL') }}
                {{ config.postSQL }}
            {% endif %}
    name: "DV Package: Effectivity Satellite"
    packageInfo:
      id: COALESCE-DATA_VAULT
      version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    version: 1
  StepType-COALESCE-DATA_VAULT::7:
    id: COALESCE-DATA_VAULT::7
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: BV SAT CURRENT VIEW
        short: SAT_CURR
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: BV Sat Current Views

        config:
        - groupName: Options
          items:
          - displayName: Sat Hash Column(s) (Include Multi-Active)
            type: columnSelector
            attributeName: isSatKey
            isRequired: true

          - displayName: Sat Date Column(s)
            type: columnSelector
            attributeName: isDateColumn
            isRequired: true

          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            options: 
            - view
            default: view
      templates:
        create:
          templateString: |-
            {{ stage('Create View') }}

            {% set order_by = namespace(order_by_txt='') %}
            {% set partition_by = namespace(partition_by_txt='') %}


            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    
                            {%- if col.isDateColumn  %} 
                        {%- if order_by.order_by_text  | length >= 1 %}{% set order_by.order_by_text = order_by.order_by_text + ',"' + col.name + '"' %}{% endif %} 
                        {%- if order_by.order_by_text  | length == 0 %}{% set order_by.order_by_text = '"' + col.name + '"' %}{% endif %}
                {% endif %} 

                {%- if col.isSatKey  %} 
                        {%- if partition_by.partition_by_text  | length >= 1 %}{% set partition_by.partition_by_text = partition_by.partition_by_text + ',"' + col.name + '"' %}{% endif %} 
                        {%- if partition_by.partition_by_text  | length == 0 %}{% set partition_by.partition_by_text = '"'+ col.name + '"' %}{% endif %}
                {% endif %}  


                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            AS
            {% for source in sources %}
                SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                {% for col in source.columns %}
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                
                {{ source.join }}
                QUALIFY LEAD({{order_by.order_by_text}}) 
                        OVER (PARTITION BY {{partition_by.partition_by_text}} 
                            ORDER BY {{order_by.order_by_text}} ASC) IS NULL


            {% endfor %}
        run:
          templateString: ""
    name: "DV Package: BV Sat Current View"
    packageInfo:
      id: COALESCE-DATA_VAULT
      version: https://github.com/Coalesce-Software-Inc/packages.git#data_vault
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Hub:
    id: Hub
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            default: table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}


            	{{ stage('Merge Hub') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isHubHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)


            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Hub
    version: 1
  StepType-Link:
    id: Link
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Link
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Link Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	
            	{% endif %}

            			
            	{{ stage('Merge Link') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isLinkHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Link
    version: 1
  StepType-Satellite:
    id: Satellite
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Satellite Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            		{% if config.preSQL %}
            			{{ stage('Pre-SQL') }}
            			{{ config.preSQL }}
            		{% endif %}
            	
            		{{ stage('Merge Satellite') }}
            		MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            		(
            			{% for source in sources %}
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if not loop.last %}
            				{{ config.insertStrategy }}
            			{% endif %}
            		{% endfor %}
            		)
            		AS "SRC"
            		ON
            		{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                        and col.sourceColumns[0].column 
                                                        and col.sourceColumns[0].column.isChangeHash
                                                        ) -%}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            		{% endfor %}
            		WHEN NOT MATCHED THEN
            		INSERT
            		(
            			{% for col in columns %}
            				"{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		) VALUES
            		(
            			{% for col in columns %}
            				"SRC"."{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		)
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Satellite
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs:
  Subgraph-2:
    id: 2
    name: Line Item
    steps: []
  Subgraph-3:
    id: 3
    name: Orders
    steps: []
  Subgraph-4:
    id: 4
    name: Demo
    steps: []
  Subgraph-5:
    id: 5
    name: Demo
    steps:
      - "162"
      - "164"
      - "165"
      - "168"
      - "180"
  Subgraph-6:
    id: 6
    name: Only Sources
    steps:
      - "162"
      - "164"
      - "165"
      - "168"
      - "226"
      - "231"
      - "233"
      - "234"
      - "236"
version: 1
